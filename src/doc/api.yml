openapi: 3.0.0
info:
  title: Barueri API
  version: 0.1.4

servers:
   - url: https://domain.com/stage

paths:
  /internal/admins:
    get:
      summary: 'Retorna todos os Admins'
      tags:
        - 'internal | admins'
      security:
        - apiKey: [ ]
      responses:
        200:
          description: Lista de Admins
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Admin"
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      summary: 'Criação de admins'
      tags:
        - 'internal | admins'
      security:
        - apiKey: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminSummary"
      responses:
        200:
          description: Admin criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
        403:
          $ref: "#/components/responses/Forbidden"
  /internal/changes-history:
    get:
      summary: 'Auditoria de histórico de alterações do sistema'
      tags:
        - 'internal | changes history'
      security:
        - appToken: [ ]
      parameters:
        - name: accountId
          in: query
          required: true
          schema:
            type: string
        - name: from
          in: query
          description: data de início
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: data de fim
          schema:
            type: string
            format: date-time
        - name: entity
          in: query
          description: entidade relacionada
          schema:
            type: string
        - name: entity_id
          in: query
          description: ID da entidade relacionada
          schema:
            type: string
      responses:
        200:
          description: Dados para auditoria das alterações da conta solicitada.
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"

  /admin/auth/token:
    post:
      summary: Retorna o token
      tags:
        - admin | auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ['username', 'password', 'client_id', 'grant_type']
              properties:
                username:
                  type: string
                  description: Nome de usuário (credencial)
                password:
                  type: string
                  description: Senha do usuário
                scope:
                  type: string
                  description: Escopo do usuário
                client_id:
                  type: string
                  description: Identificador da aplicação requisitante
                grant_type:
                  type: string
                  enum: ['password']
      responses:
        200:
          description: Token criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
  /admin/auth/change-password:
    post:
      summary: Cria uma sessão e envia email com o código para confirmação
      tags:
        - admin | auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ['username', 'client_id']
              properties:
                username:
                  type: string
                  description: Nome de usuário (credencial)
                client_id:
                  type: string
                  description: Identificador da aplicação requisitante
      responses:
        200:
          # Seria melhor separar por dois responses diferentes?
          description: Email com o código enviado com sucesso ou usuário não encontrado
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      session:
                        type: string
                        description: Identificador da sessão
                      state:
                        type: string
                        description: Tipo da sessão
                        default: validate-code
                  - type: object
                    properties:
                      state:
                        type: string
                        description: Tipo da sessão
                        default: email-sent
  /admin/auth/resend-code:
    post:
      summary: Reenvia email com o código para confirmação
      tags:
        - admin | auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session:
                  type: string
                  description: Identificador da sessão
      responses:
        200:
          description: Email com o código reenviado com sucesso
          content:
            application/json:
              schema:
                properties:
                  session:
                    type: string
                    description: Identificador da sessão
                  state:
                    type: string
                    description: Tipo da sessão
                    default: validate-code
        404:
          $ref: "#/components/responses/NotFound"
  /admin/auth/validate-code:
    post:
      summary: Valida o código e cria a sessão
      tags:
        - admin | auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session:
                  type: string
                  description: Identificador da sessão
                code:
                  type: string
                  description: Código recebido através de email
      responses:
        200:
          description: Código validado
          content:
            application/json:
              schema:
                properties:
                  session:
                    type: string
                    description: Identificador da sessão
                  state:
                    type: string
                    description: Tipo da sessão
                    enum: [set-password, validate-code]
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/auth/set-password:
    post:
      summary: Modifica a senha
      tags:
        - admin | auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session:
                  type: string
                  description: Identificador da sessão
                password:
                  type: string
                  description: Senha
      responses:
        200:
          description: Senha modificada com sucesso
          content:
            application/json:
              schema:
                properties:
                  state:
                    type: string
                    description: Tipo da sessão
                    default: success
        404:
          $ref: "#/components/responses/NotFound"

  /admin/accounts:
    get:
      summary: 'Retorna todas as contas com id, nome e se é demo ou não'
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      responses:
        200:
          description: Lista de contas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LightAccountSummary"
        403:
          $ref: "#/components/responses/Forbidden"
  /admin/accounts/{accountId}:
    get:
      summary: 'Retorna detalhes resumidos da conta'
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes resumidos de conta
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/LightAccountSummary"
        403:
          $ref: "#/components/responses/Forbidden"
  /admin/accounts/{accountId}/users/{userId}:
    get:
      summary: 'Retorna detalhes resumidos de usurio'
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes resumidos de usuário
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/LightUserSummary"
        403:
          $ref: "#/components/responses/Forbidden"

  /admin/accounts/commercials:
    get:
      summary: 'Retorna todas as contas comerciais'
      tags:
        - 'admin | accounts'
      security:
        - adminToken: []
      parameters:
        - name: search
          in: query
          description: 'Parâmetro de busca opcional para filtrar contas comerciais'
          required: false
          schema:
            type: string
      responses:
        200:
          description: Lista de contas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountSummary"
        403:
          $ref: "#/components/responses/Forbidden"

    post:
      summary: 'Criação de conta comercial'
      tags:
        - 'admin | accounts'
      security:
        - adminToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/AccountSummary"
                - type: object
                  properties:
                    cnpj:
                      type: string
                    company_name:
                      type: string
                    address:
                      type: object
                      properties:
                        postal_code:
                          type: string
                        street:
                          type: string
                        number:
                          type: string
                        neighborhood:
                          type: string
                        city:
                          type: string
                        state:
                          type: string
                        additional_info:
                          type: string
                          nullable: true
                    financial_responsible:
                      type: object
                      properties:
                        name:
                          type: string
                          required: true
                        email:
                          type: string
                          required: true
                        phone:
                          type: string
                          required: true
                    value_per_user:
                      type: string
                    min_users_number:
                      type: number
                    close_invoice:
                      type: number
                    payment_day:
                      type: number
                    contract_initial_day:
                      type: string
                      format: date
                    contract_final_day:
                      type: string
                      format: date
                    type:
                        type: string
                        enum:
                          - Experimental
                          - Free
                          - Paid
                    responsible:
                          $ref: "#/components/schemas/AccountResponsible"
      responses:
        200:
          description: Conta criada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        409:
          $ref: "#/components/responses/Conflict"
  /admin/accounts/commercials/{accountId}:
    get:
      summary: 'Detalhes da conta comercial'
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes da conta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: Atualização de conta
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/AccountSummary"
                - properties:
                    responsible:
                      $ref: "#/components/schemas/AccountResponsible"
                    type:
                        type: string
                        enum:
                          - Experimental
                          - Free
                          - Paid
      responses:
        200:
          description: Conta alterada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
  /admin/accounts/trainings:
    get:
      summary: 'Retorna todas as contas de treinamento'
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
      - name: search
        in: query
        description: 'Parâmetro de busca opcional para filtrar contas comerciais'
        required: false
        schema:
          type: string
      responses:
        200:
          description: Lista de contas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountSummary"
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      summary: 'Criação de contas de treinamento'
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/AccountSummary"
                - properties:
                    responsible:
                      $ref: "#/components/schemas/AccountResponsible"
                    expiry_date:
                      type: string
                      format: date-time
      responses:
        200:
          description: Conta criada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        409:
          $ref: "#/components/responses/Conflict"
  /admin/accounts/trainings/{accountId}:
    get:
      summary: 'Detalhes da conta de treinamento'
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes da conta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: Atualização de conta de treinamento
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/AccountSummary"
                - properties:
                    responsible:
                      $ref: "#/components/schemas/AccountResponsible"
      responses:
        200:
          description: Conta alterada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"

  /admin/users:
    get:
      summary: 'Retorna lista de administradores'
      tags:
        - 'admin | admins'
      security:
        - adminToken: [ ]
      responses:
        200:
          description: Lista de administradores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Admin"
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      summary: 'Criação de administrador'
      tags:
        - 'admin | admins'
      security:
        - adminToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/AdminSummary"
      responses:
        200:
          description: Administrador criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        409:
          $ref: "#/components/responses/Conflict"
  /admin/users/me:
    get:
      summary: 'Detalhes do administrador logado'
      tags:
        - 'admin | admins'
      security:
        - adminToken: [ ]
      responses:
        200:
          description: Detalhes do administrador
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/users/{userId}:
    get:
      summary: 'Detalhes do administrador'
      tags:
        - 'admin | admins'
      security:
        - adminToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes do administrador
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: Atualização de administrador
      tags:
        - 'admin | admins'
      security:
        - adminToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminSummary"
      responses:
        200:
          description: Administrador alterada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"

  /admin/users/{userId}/disabled:
    put:
      summary: 'Habilita/Desabilita administrador'
      tags:
        - 'admin | admins'
      security:
        - adminToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        204:
          description: Administrador alterado com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /admin/accounts/commercials/{accountId}/password:
    put:
      summary: Muda apenas a senha do responsável pela conta
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        204:
          description: Conta alterada com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /admin/accounts/commercials/{accountId}/disabled:
    put:
      summary: Habilita/desabilita conta
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        204:
          description: Conta alterada com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /admin/accounts/trainings/{accountId}/expiry-date:
    put:
      summary: Habilita a conta e altera data de expiração
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: date-time
      responses:
        204:
          description: Conta alterada com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /admin/accounts/trainings/{accountId}/password:
    put:
      summary: Muda apenas a senha do responsável pela conta
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        204:
          description: Conta alterada com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /admin/accounts/trainings/{accountId}/disabled:
    put:
      summary: Habilita/desabilita conta
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        204:
          description: Conta alterada com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/accounts/commercials/{accountId}/feedbacks/count:
    get:
      summary: Busca quantidade de feedbacks da conta
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Quantidade de feedbacks
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/accounts/commercials/{accountId}/reprimands/count:
    get:
      summary: Busca quantidade de advertências da conta
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Quantidade de advertências
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/accounts/commercials/{accountId}/coaching-registers/count:
    get:
      summary: Busca quantidade de processos de coaching da conta
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Quantidade de processos de coaching
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/accounts/commercials/{accountId}/suspensions/count:
    get:
      summary: Busca quantidade de suspensões da conta
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Quantidade de suspensões
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/accounts/commercials/{accountId}/trainings/count:
    get:
      summary: Busca quantidade de treinamentos da conta
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Quantidade de treinamentos
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/accounts/commercials/{accountId}/evaluations/count:
    get:
      summary: Busca quantidade de avaliações da conta
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Quantidade de avaliações
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/accounts/commercials/{accountId}/sessions/count:
    get:
      summary: Busca quantidade de usuários que acessam a conta por período
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
          examples:
            account_id:
              value: pioneer
            self:
              value: me
        - name: groupBy
          in: query
          required: true
          schema:
            type: string
            default: 'day'
            enum:
              - day
              - month
        - name: from
          in: query
          description: data de início
          required: true
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: data de fim
          required: true
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: Quantidade de usuários que acessaram o sistema por dia
          content:
            application/json:
              schema:
                type: object
                properties:
                  dates:
                    type: object
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/accounts/commercials/{accountId}/sectors/count:
    get:
      summary: 'Retorna quantidade de setores no organograma'
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Setores do organograma
          content:
            schema:
                type: number
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/accounts/commercials/{accountId}/sessions/lastActive:
    get:
      summary: Busca a última sessão ativa da conta
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
          examples:
            account_id:
              value: pioneer
            self:
              value: me
      responses:
        200:
          description: Último acesso da conta
          content:
            application/json:
              schema:
                type: object
                properties:
                  dates:
                    type: object
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"


  /admin/accounts/commercials/{accountId}/logoUrl:
    get:
      summary: 'Retorna link de upload da logo de conta'
      description: O arquivo deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: ContentType
          in: query
          required: true
          schema:
            description: Aceita mimes 'image/*'
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/accounts/trainings/{accountId}/logoUrl:
    get:
      summary: 'Retorna link de upload da logo de conta'
      description: O arquivo deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: ContentType
          in: query
          required: true
          schema:
            description: Aceita mimes 'image/*'
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /admin/accounts/commercials/{accountId}/contractUrl:
    get:
      summary: 'Retorna link de upload do contrato de conta'
      description: O arquivo (EM PDF) deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: ContentType
          in: query
          required: true
          schema:
            description: Aceita mimes 'pdf'
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"


  /admin/accounts/commercials/{accountId}/users/count:
    get:
      summary: 'Contagem de usuários'
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Contagem de usuários
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCount"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /admin/accounts/trainings/{accountId}/users/count:
    get:
      summary: 'Contagem de usuários'
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Contagem de usuários
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCount"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/accounts/commercials/{accountId}/users/{userId}:
    get:
      summary: 'detalhes de usuário'
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: detalhes de usuário
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/accounts/commercials/{accountId}/boletos:
    get:
      summary: 'Retorna listagem de boletos da conta'
      tags:
        - 'admin | boletos'
      security:
        - adminToken: [ ]
      responses:
        200:
          description: Lista de boletos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BoletoSummary"
        403:
          $ref: "#/components/responses/Forbidden"

  /admin/accounts/trainings/{accountId}/users/{userId}:
    get:
      summary: 'detalhes de usuário'
      tags:
        - 'admin | accounts'
      security:
        - adminToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: detalhes de usuário
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /admin/accounts/trainings/{accountId}/managers/many/template:
    get:
      summary: Retorna a planilha template para utilizar na importação de gestores.
      tags:
        - 'admin | managers'
      security:
        - appToken: [ ]
      responses:
        200:
          description: Link da planilha template
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/accounts/trainings/{accountId}/managers/many/url:
    get:
      summary: Cria url para upload de planilha de importação de gestores
      description: O arquivo deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'admin | managers'
      security:
        - appToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: ContentType
          in: query
          required: true
          schema:
            description: Aceita mimes 'application/vnd.*'
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
        - name: ContentDisposition
          in: query
          required: true
          schema:
            description: Disposition
            type: string
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: Confirma upload de planilha e finaliza importação de gestores
      tags:
        - 'admin | managers'
      security:
        - appToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ['filePath']
              properties:
                filePath:
                  type: string
      responses:
        200:
          description: Dados e status da tarefa assíncrona de importação de gestores.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncTask"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
  /admin/accounts/trainings/{accountId}/async-tasks/{asyncTaskId}:
    get:
      summary: 'Recupera informações sobre status de alguma tarefa assíncrona'
      tags:
        - 'admin | asyncTasks'
      security:
        - appToken: [ ]
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
        - name: asyncTaskId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Dados e status da tarefa assíncrona solicitada.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncTask"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"

  /admin/notes/:
    get:
      summary: 'Lista notas'
      tags:
        - 'admin | notes'
      security:
        - adminToken: [ ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/NotesOrderBy'
      responses:
        200:
          description: Lista de notas (paginada)
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/NoteSummary"
                  page:
                    type: integer
                  pageSize:
                    type: integer
        400:
          $ref: "#/components/responses/BadRequest"
  /admin/notes/{noteId}:
    get:
      summary: 'Detalhes de nota'
      tags:
        - 'admin | notes'
      security:
        - adminToken: [ ]
      parameters:
        - name: noteId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes da nota
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"
        404:
          $ref: "#/components/responses/NotFound"

  /admin/faq:
    post:
      summary: 'Criação de FAQ'
      tags:
        - 'admin | faq'
      security:
        - adminToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Faq"
      responses:
        200:
          description: FAQ criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FaqSummary"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        409:
          $ref: "#/components/responses/Conflict"
    get:
      summary: 'Listagem do FAQ'
      tags:
        - 'admin | faq'
      security:
        - adminToken: [ ]
      responses:
        200:
          description: Lista de FAQs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FaqSummary"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/faq/{faqId}:
    get:
      summary: 'Detalhes do FAQ'
      tags:
        - 'admin | faq'
      security:
        - adminToken: [ ]
      parameters:
        - name: faqId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes do FAQ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FaqSummary"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Atualização do FAQ
      tags:
        - 'admin | faq'
      security:
        - adminToken: [ ]
      parameters:
        - name: faqId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Faq"
      responses:
        200:
          description: FAQ alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FaqSummary"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
    delete:
      summary: Deletar FAQ
      tags:
        - 'admin | faq'
      security:
        - adminToken: [ ]
      parameters:
        - name: faqId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: FAQ deletado com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/faq/{faqId}/disabled:
    put:
      summary: Habilita/desabilita FAQ
      tags:
        - 'admin | faq'
      security:
        - adminToken: [ ]
      parameters:
        - name: faqId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        204:
          description: Conta alterada com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /admin/videos:
    get:
      summary: 'Listagem dos vídeos'
      tags:
        - 'admin | videos'
      security:
        - adminToken: [ ]
      responses:
        200:
          description: Lista de Videos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VideoSummary"
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      summary: 'Criação de Video'
      tags:
        - 'admin | videos'
      security:
        - adminToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VideoSummary"
      responses:
        200:
          description: Dados para upload de video
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  ks:
                    type: string
                  upload_token_id:
                    type: string
                  url:
                    type: string
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
  /admin/videos/{videoId}:
    get:
      summary: 'Datalhes do vídeo'
      tags:
        - 'admin | videos'
      security:
        - adminToken: [ ]
      responses:
        200:
          description: Detalhes do video
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoSummary"
        403:
          $ref: "#/components/responses/Forbidden"
    patch:
      summary: 'Edição de vídeo'
      tags:
        - 'admin | videos'
      security:
        - adminToken: [ ]
      responses:
        200:
          description: Video editado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoSummary"
        403:
          $ref: "#/components/responses/Forbidden"
  /admin/videos/{videoId}/url:
    put:
      summary: Upload de video para edição
      tags:
        - 'admin | videos'
      security:
        - adminToken: [ ]
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Dados para upload de video
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  ks:
                    type: string
                  upload_token_id:
                    type: string
                  url:
                    type: string
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/videos/{videoId}/disabled:
    put:
      summary: Habilita/desabilita video
      tags:
        - 'admin | videos'
      security:
        - adminToken: [ ]
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        204:
          description: Video alterado com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/videos/{videoId}/captions:
    get:
      summary: Listagem de legendas de um vídeo
      tags:
        - 'admin | videos'
      security:
        - adminToken: [ ]
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Listagem de legendas
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: Upload de legenda de vídeo
      tags:
        - 'admin | videos'
      security:
        - adminToken: [ ]
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                language:
                  $ref: "#/components/schemas/LanguagesEnums"
              required:
                - file
                - language
            encoding:
              file:
                contentType: text/vtt
      responses:
        200:
          description: Legenda criada
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/videos/{videoId}/captions/{captionId}:
    patch:
      summary: Edição de legenda
      tags:
        - 'admin | videos'
      security:
        - adminToken: [ ]
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
        - name: captionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
            encoding:
              file:
                contentType: text/vtt
      responses:
        200:
          description: Legenda editada
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Exclusão de legenda
      tags:
        - 'admin | videos'
      security:
        - adminToken: [ ]
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
        - name: captionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Legenda excluida com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /admin/trainings:
    post:
      summary: Cria treinamento
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Training'
      responses:
        200:
          description: Treinamento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
        400:
          $ref: '#/components/responses/BadRequest'
    get:
      summary: Listagem de treinamentos da conta
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      responses:
        200:
          description: Listagem de treinamentos da conta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
        404:
          $ref: '#/components/responses/NotFound'
  /admin/trainings/{trainingId}:
    get:
      summary: Detalhes do treinamento
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes do treinamento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      summary: Atualização de treinamento
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Training"
      responses:
        200:
          description: Treinamento alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Training"
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/trainings/{trainingId}/disabled:
    put:
      summary: Habilita/desabilita treinamento
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: boolean
      responses:
        204:
          description: Treinamento alterado com sucesso
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/trainings/{trainingId}/thumbnailUrl:
    get:
      summary: 'Retorna link de upload da thumbnail do treinamento'
      description: O arquivo deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: ContentType
          in: query
          required: true
          schema:
            description: Aceita mimes 'image/*'
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/trainings/{trainingId}/topics:
    post:
      summary: Cria tópico de treinamento
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingTopic'
      responses:
        200:
          description: Tópico de treinamento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingTopic'
        400:
          $ref: '#/components/responses/BadRequest'
    get:
      summary: Listagem de tópicos do treinamento
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Listagem de tópicos do treinamento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingTopic'
        404:
          $ref: '#/components/responses/NotFound'
  /admin/trainings/{trainingId}/topics/{topicId}:
    get:
      summary: Detalhes do tópico do treinamento
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes do tópico do treinamento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingTopic'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      summary: Atualização do tópico do treinamento
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrainingTopic"
      responses:
        200:
          description: Tópico alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingTopic"
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Deletar Tópico
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Tópico deletado com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/trainings/{trainingId}/topics/{topicId}/contents/video:
    post:
      summary: Cria video para conteúdo
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Conteúdo criado e adicionado ao tópico com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingTopic'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: '#/components/responses/NotFound'
  /admin/trainings/{trainingId}/topics/{topicId}/contents:
    post:
      summary: Cria conteúdo do tópico
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Content'
      responses:
        200:
          description: Conteúdo criado e adicionado ao tópico com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingTopic'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: '#/components/responses/NotFound'
  /admin/trainings/{trainingId}/topics/{topicId}/contents/{contentId}:
    get:
      summary: Detalhes do conteúdo
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes do conteúdo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: '#/components/responses/NotFound'
    put:
      summary: Atualiza conteúdo
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Content"
      responses:
        200:
          description: Conteúdo alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/trainings/{trainingId}/topics/{topicId}/contents/{contentId}/attUrl:
    get:
      summary: 'Retorna link de upload para anexos de material complementar'
      description: O arquivo deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
        - name: contentId
          in: path
          required: true
          schema:
            type: string
        - name: ContentType
          in: query
          required: true
          schema:
            description: Aceita mimes 'image/*', 'application/pdf', 'application/vnd.ms-excel', 'application/msword' e 'text/plain'
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
        - name: ContentDisposition
          in: query
          required: true
          schema:
            description: Disposition
            type: string
            enum: ['inline']
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
        - name: FileName
          in: query
          required: true
          schema:
            description: Nome do arquivo
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/trainings/{trainingId}/topics/{topicId}/contents/{contentId}/attachments/{attachmentId}:
    delete:
      summary: Exclusão de anexo de material complementar
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
        - name: contentId
          in: path
          required: true
          schema:
            type: string
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Anexo excluido com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/trainings/{trainingId}/topics/{topicId}/contents/{contentId}/captions:
    get:
      summary: Listagem de legendas de um conteúdo do tipo video
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Listagem de legendas
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: Upload de legenda de conteúdo do tipo vídeo
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                language:
                  $ref: "#/components/schemas/LanguagesEnums"
              required:
                - file
                - language
            encoding:
              file:
                contentType: text/vtt
      responses:
        200:
          description: Legenda criada
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /admin/trainings/{trainingId}/topics/{topicId}/contents/{contentId}/captions/{captionId}:
    patch:
      summary: Edição de legenda
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: string
        - name: captionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
            encoding:
              file:
                contentType: text/vtt
      responses:
        200:
          description: Legenda editada
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Exclusão de legenda
      tags:
        - 'admin | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
        - name: captionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Legenda excluida com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/configurations:
    post:
      summary: 'Cria configuração da conta'
      tags:
        - 'app | configuration'
      security:
        - appToken: [ ]
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usersCanEditAvatar:
                  type: boolean
              required: ['usersCanEditAvatar']
      responses:
        201:
          description: Configuração criada
          content:
            application/json:
              schema:
                type: object
                properties:
                  account:
                    type: string
                  userCanEditAvatar:
                    type: boolean
                  id:
                    type: string

    get:
      summary: 'Retorna a configuração da conta'
      tags:
        - 'app | configuration'
      security:
        - appToken: [ ]
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Lista de configuração da conta
          content:
            application/json:
              schema:
                type: object
                properties:
                  userCanEditAvatar:
                    type: boolean
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
                  created_by:
                    type: string
                  id:
                    type: string
                  account:
                    type: string

    patch:
      summary: 'Altera configuração da conta'
      tags:
        - 'app | configuration'
      security:
        - appToken: [ ]
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usersCanEditAvatar:
                  type: boolean
              required: ['usersCanEditAvatar']
      responses:
        204:
          description: Atualização realizada
          content:
            application/json:
              schema:
                type: object
                properties:
                  account:
                    type: string
                  userCanEditAvatar:
                    type: boolean
                  id:
                    type: string

  /app/job-vacancies:
    get:
      summary: Lista todas as vagas da conta
      tags:
        - 'app | job vacancy'
      security:
        - appToken: [ ]
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Lista todas as vagas da conta
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/JobVacancy'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Cria uma nova vaga
      tags:
        - 'app | job vacancy'
      security:
        - appToken: [ ]
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/JobVacancy'
      responses:
        '201':
          description: Job vacancy created
          content:
            application/json:
              schema:
              properties:
                $ref: '#/components/JobVacancy'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /app/job-vacancies/{id}:
    get:
      summary: Busca vaga por ID
      tags:
        - 'app | job vacancy'
      security:
        - appToken: [ ]
          schema:
            type: boolean
            default: false
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A job vacancy
          content:
            application/json:
              schema:
                $ref: '#/components/JobVacancy'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Atualiza vaga pelo ID
      tags:
        - 'app | job vacancy'
      security:
        - appToken: [ ]
          schema:
            type: boolean
            default: false
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/JobVacancyUpdate'
      responses:
        '200':
          description: Job vacancy updated
          content:
            application/json:
              schema:
                $ref: '#/components/JobVacancy'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /app/job-vacancies/{id}/enabled:
     put:
      summary: Atualiza vaga pelo ID
      tags:
        - 'app | job vacancy'
      security:
        - appToken: [ ]
          schema:
            type: boolean
            default: false
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ['enabled']
              properties:
                enabled:
                  type: boolean
      responses:
        '200':
          description: Job vacancy updated
          content:
            application/json:
              schema:
                $ref: '#/components/JobVacancy'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /app/public/me:
    get:
      summary: 'Dados públicos da conta'
      tags:
        - 'app | public'
      responses:
        200:
          description: Dados públicos da conta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicAccountSummary'
  /app/oauth/token:
    post:
      summary: Gera token
      tags:
        - 'app | auth'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: ['client_id', 'grant_type', 'username', 'password']
              properties:
                client_id:
                  type: string
                grant_type:
                  type: string
                  enum: ['password']
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Token gerada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token_type:
                    type: string
                  access_token:
                    type: string
                  expires_in:
                    type: integer
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
  /app/oauth/password:
    put:
      summary: Mudança de senha no login
      tags:
        - 'app | auth'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                old_password:
                  $ref: '#/components/schemas/PasswordSchema'
                new_password:
                  $ref: '#/components/schemas/PasswordSchema'
      responses:
        204:
          description: Senha alterada com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
  /app/managers:
    get:
      summary: 'Listagem de gestores'
      tags:
        - 'app | managers'
      security:
        - appToken: [ ]
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Lista de gestores
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/EmployeeSummary"
                        - type: object
                          properties:
                            hired_at:
                              type: string
                              format: date-time
        403:
          $ref: "#/components/responses/Forbidden"
  /app/sectors:
    get:
      summary: 'Retorna o Organograma da conta'
      tags:
        - 'app | sectors'
      security:
        - appToken: [ ]
      parameters:
        - name: from
          in: query
          schema:
            type: string
        - name: tree
          in: query
          schema:
            type: boolean
        - name: includeRemoved
          in: query
          schema:
            type: boolean
      responses:
        200:
          description: Representação do Organograma
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/OrgChart"
                  - type: array
                    items:
                      $ref: "#/components/schemas/SectorSummary"
        403:
          $ref: "#/components/responses/Forbidden"
  /app/sectors/employees:
    get:
      summary: 'Retorna listagem de funcionários por setor'
      tags:
        - 'app | sectors'
      security:
        - appToken: [ ]
      parameters:
        - name: from
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/search'
        - name: searchIn
          in: query
          schema:
            type: array
            items:
              type: string
            default: ['name']
      responses:
        200:
          description: Listagem funcionários (paginada e ordenada por setor)
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/EmployeeSummary"
                  page:
                    type: integer
                  pageSize:
                    type: integer
        403:
          $ref: "#/components/responses/Forbidden"
  /app/sectors/hierarchical:
    get:
      summary: 'Retorna o Organograma hierarquico'
      tags:
        - 'app | sectors'
      security:
        - appToken: [ ]
      responses:
        200:
          description: Representação do  hierarquico
        403:
          $ref: "#/components/responses/Forbidden"

  /app/sectors/{sectorId}/children:
    post:
      summary: 'Adiciona setor ao organograma'
      tags:
        - 'app | sectors'
      security:
        - appToken: [ ]
      parameters:
        - name: sectorId
          in: path
          description: Identificador do setor
          required: true
          schema:
            $ref: '#/components/schemas/SectorId'
        - name: dedicatedManager
          in: query
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 255
                color:
                  type: string
                  maxLength: 32
              required: ['name', 'color']
      responses:
        200:
          description: Setor criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrgChart"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        409:
          $ref: "#/components/responses/Conflict"
    put:
      summary: Move setor
      tags:
        - 'app | sectors'
      security:
        - appToken: [ ]
      parameters:
        - name: sectorId
          in: path
          description: Identificador do setor destino
          required: true
          schema:
            $ref: '#/components/schemas/SectorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: '#/components/schemas/SectorId'
              description: 'Identificador do setor sujeito'
              required: ['id']
      responses:
        200:
          description: Setor movido com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrgChart"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
  /app/sectors/{sectorId}:
    get:
      summary: Retorna informações detalhadas do setor
      tags:
        - 'app | sectors'
      security:
        - appToken: [ ]
      parameters:
        - name: sectorId
          in: path
          description: Identificador do setor
          required: true
          schema:
            $ref: '#/components/schemas/SectorId'
      responses:
        200:
          description: Informações detalhadas do setor.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SectorDetailed"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Atualiza setor
      tags:
        - 'app | sectors'
      security:
        - appToken: [ ]
      parameters:
        - name: sectorId
          in: path
          description: Identificador do setor
          required: true
          schema:
            $ref: '#/components/schemas/SectorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 255
                color:
                  type: string
                  maxLength: 32
                manager:
                  type: string
                  description: 'Identificador do usuário gestor do setor'
      responses:
        200:
          description: Setor alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrgChart"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
    delete:
      summary: Deleta setor
      tags:
        - 'app | sectors'
      security:
        - appToken: [ ]
      parameters:
        - name: sectorId
          in: path
          description: Identificador do setor
          required: true
          schema:
            $ref: '#/components/schemas/SectorId'
      responses:
        200:
          description: Setor deletado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrgChart"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/sectors/{sectorId}/climate-checks:
    get:
      summary: Média do clima do setor no dia.
      tags:
        - 'app | sectors'
      security:
        - appToken: [ ]
      parameters:
        - name: sectorId
          in: path
          description: Identificador do setor
          required: true
          schema:
            $ref: '#/components/schemas/SectorId'
        - name: deep
          in: query
          description: Define se valores de setores relativos ao setor passado devem ser computados.
          required: false
          schema:
              type: boolean
        - name: date
          in: query
          description: data de checagem (se não preenchida, o dia é hoje)
          schema:
            type: string
            format: date
      responses:
        200:
          description: Objeto com média do clima do setor no dia.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClimateChecks"
        403:
          $ref: "#/components/responses/Forbidden"
  /app/sectors/{sectorId}/climate-checks/history:
    get:
      summary: Histórico de clima do setor
      tags:
        - 'app | sectors'
      security:
        - appToken: [ ]
      parameters:
        - name: sectorId
          in: path
          description: Identificador do setor
          required: true
          schema:
            $ref: '#/components/schemas/SectorId'
        - name: deep
          in: query
          description: Define se valores de setores relativos ao setor passado devem ser computados.
          required: false
          schema:
              type: boolean
        - name: from
          in: query
          description: data de início
          required: true
          schema:
            type: string
            format: date
        - name: to
          in: query
          description: data de fim
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: Lista de climas do setor
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClimateChecks'
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/sectors/{sectorId}/climate-checks/assiduity:
    get:
      summary: Assiduidade da pesquisa de clima do setor
      tags:
        - 'app | sectors'
      security:
        - appToken: [ ]
      parameters:
        - name: sectorId
          in: path
          description: Identificador do setor
          required: true
          schema:
            $ref: '#/components/schemas/SectorId'
        - name: from
          in: query
          description: data de início
          required: false
          schema:
            type: string
            format: date
        - name: to
          in: query
          description: data de fim
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: Assiduidade dos funcionários (em porcentagem)
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/sectors/{sectorId}/employees:
    get:
      summary: Lista colaboradores do setor
      tags:
        - 'app | sectors'
      security:
        - appToken: [ ]
      parameters:
        - name: sectorId
          in: path
          description: Identificador do setor
          required: true
          schema:
            $ref: '#/components/schemas/SectorId'
      responses:
        200:
          description: Time do setor
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/EmployeeSummary"
                    - type: object
                      properties:
                        hired_at:
                          type: string
                          format: date-time
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/ranks:
    get:
      summary: 'Retorna todos os cargos'
      tags:
        - 'app | ranks'
      security:
        - appToken: [ ]
      responses:
        200:
          description: Lista de cargos
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/RankSummary"
                    - $ref: '#/components/schemas/TimestampsAndControlFields'
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      summary: 'Criação de cargos'
      tags:
        - 'app | ranks'
      security:
        - appToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Rank"
      responses:
        200:
          description: Cargo criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rank"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        409:
          $ref: "#/components/responses/Conflict"
  /app/ranks/many/template:
    get:
      summary: Retorna a planilha template para utilizar na importação de cargos.
      tags:
        - 'app | ranks'
      security:
        - appToken: [ ]
      responses:
        200:
          description: Link da planilha template
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/ranks/many/url:
    get:
      summary: Cria url para upload de planilha de importação de cargos
      description: O arquivo deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'app | ranks'
      security:
        - appToken: [ ]
      parameters:
        - name: ContentType
          in: query
          required: true
          schema:
            description: Aceita mimes 'application/vnd.*'
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
        - name: ContentDisposition
          in: query
          required: true
          schema:
            description: Disposition
            type: string
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: Confirma upload de planilha e finaliza importação de cargos
      tags:
        - 'app | ranks'
      security:
        - appToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ['filePath']
              properties:
                filePath:
                  type: string
      responses:
        200:
          description: Dados e status da tarefa assíncrona de importação de cargos.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncTask"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
  /app/sectors/{sectorId}/evaluations:
    post:
        summary: 'Cria avaliações para todos do setor e gestores dos setores imediatamente abaixo do setor'
        tags:
          - 'app | evaluations'
        security:
          - appToken: [ ]
        parameters:
          - name: sectorId
            in: path
            required: true
            schema:
              type: string
              readOnly: true
          - name: deep
            in: query
            required: false
            schema:
              type: boolean
            description: "Não suportado para multidirecional"
        requestBody:
          required: true
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/EvaluationCreate"
                  - type: object
                    required:
                      - type
                    properties:
                      type:
                        type: string
                        enum: ['decision-matrix', 'multidirectional.']
                      evaluators:
                        type: integer
                        description: "Obrigatório em multidirecional"

        responses:
          202:
            $ref: "#/components/responses/Accepted"
          204:
            description: Avaliações criadas com sucesso
          400:
            $ref: "#/components/responses/BadRequest"
          403:
            $ref: "#/components/responses/Forbidden"
          404:
            $ref: "#/components/responses/NotFound"
          422:
            $ref: "#/components/responses/UnprocessableEntity"
    delete:
      summary: Remove avaliações do setor que não foram respondidas e foram criadas pelo usuário
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - name: sectorId
          in: path
          description: Identificador do setor
          required: true
          schema:
            $ref: '#/components/schemas/SectorId'
        - name: deep
          in: query
          description: Define se valores de setores relativos ao setor passado devem ser computados.
          required: false
          schema:
              type: boolean
        - name: type
          in: query
          description: Tipo da avaliação
          required: false
          schema:
              type: string
              default: decision-matrix
              enum: ['decision-matrix']
      responses:
        202:
          $ref: "#/components/responses/Accepted"
        204:
          description: Avaliações removidas
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/sectors/{sectorId}/evaluations-scheduler/:
    get:
      summary: 'Listagem de agendamentos de avaliação do setor'
      tags:
        - 'app | evaluations-scheduler'
      security:
        - appToken: [ ]
      parameters:
        - name: sectorId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
        - name: type
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/EvaluationsSchedulerType'
      responses:
        200:
          description: Lista de agendamentos de avaliação do setor
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/EvaluationsSchedulerSummary"
                    - $ref: '#/components/schemas/TimestampsAndControlFields'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: 'Cria agendamento de avaliação'
      tags:
        - 'app | evaluations-scheduler'
      security:
        - appToken: [ ]
      parameters:
        - name: sectorId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluationsScheduler"
      responses:
        200:
          description: Agendamento criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationsScheduler"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/sectors/{sectorId}/evaluations-scheduler/{schedulerId}:
    get:
      summary: 'Detalhes de agendamento de avaliação'
      tags:
        - 'app | evaluations-scheduler'
      security:
        - appToken: [ ]
      parameters:
        - name: sectorId
          in: path
          required: true
          schema:
            type: string
        - name: schedulerId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes de agendamento de avaliação
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationsScheduler"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: 'Atualiza agendamento de avaliação'
      tags:
        - 'app | evaluations-scheduler'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: schedulerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EvaluationsScheduler"
                - properties:
                    type:
                      readOnly: true
                    status:
                      readOnly: false
      responses:
        200:
          description: Agendamento de avaliação alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationsScheduler"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: 'Deleta agendamento de avaliação'
      tags:
        - 'app | evaluations-scheduler'
      security:
        - appToken: [ ]
      parameters:
        - name: sectorId
          in: path
          required: true
          schema:
            type: string
        - name: schedulerId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Agendamento deletado com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/{employeeId}/evaluations-scheduler/:
    get:
      summary: 'Listagem de agendamentos de avaliação do colaborador'
      tags:
        - 'app | evaluations-scheduler'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
        - name: type
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/EmployeeEvaluationsSchedulerType'
      responses:
        200:
          description: Lista de agendamentos de avaliação do colaborador
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/EvaluationsSchedulerSummary"
                    - $ref: '#/components/schemas/TimestampsAndControlFields'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: 'Cria agendamento de avaliação para colaborador'
      tags:
        - 'app | evaluations-scheduler'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeEvaluationsScheduler"
      responses:
        200:
          description: Agendamento criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeEvaluationsScheduler"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/{employeeId}/evaluations-scheduler/ape:
    get:
      summary: 'Detalhes de agendamento de ape'
      tags:
        - 'app | evaluations-scheduler'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes de agendamento de ape
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeEvaluationsScheduler"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: 'Atualiza agendamento de ape'
      tags:
        - 'app | evaluations-scheduler'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EmployeeEvaluationsScheduler"
                - properties:
                    type:
                      readOnly: true
                    status:
                      readOnly: false
      responses:
        200:
          description: Agendamento de avaliação alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeEvaluationsScheduler"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: 'Deleta agendamento de ape'
      tags:
        - 'app | evaluations-scheduler'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Agendamento deletado com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/ranks/{rankId}:
    get:
      summary: 'Detalhes do cargo'
      tags:
        - 'app | ranks'
      security:
        - appToken: [ ]
      parameters:
        - name: rankId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes do cargo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rank"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: Atualização de cargo
      tags:
        - 'app | ranks'
      security:
        - appToken: [ ]
      parameters:
        - name: rankId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Rank"
      responses:
        200:
          description: Cargo alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rank"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
  /app/ranks/{rankId}/disabled:
    put:
      summary: Habilita/desabilita cargo
      tags:
        - 'app | ranks'
      security:
        - appToken: [ ]
      parameters:
        - name: rankId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        204:
          description: Cargo alterado com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/roles:
    get:
      summary: 'Listagem de papeis'
      tags:
        - 'app | roles'
      security:
        - appToken: [ ]
      responses:
        200:
          description: Lista de papeis
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/RoleSummary"
                  page:
                    type: integer
                  pageSize:
                    type: integer
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      summary: 'Criação de perfil'
      tags:
        - 'app | roles'
      security:
        - appToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/RoleSummary"
      responses:
        200:
          description: Perfil criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        403:
          $ref: "#/components/responses/Forbidden"
  /app/roles/types:
    get:
      summary: tipos de permissões
      tags:
        - 'app | roles'
      security:
        - appToken: [ ]
      responses:
        200:
          description: Listagem de permissões disponíveis
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
        403:
          $ref: "#/components/responses/Forbidden"
  /app/roles/{roleId}:
    get:
      summary: 'Detalhes da perfil'
      tags:
        - 'app | roles'
      security:
        - appToken: [ ]
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes de perfil
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleSummary"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: Atualização de perfil
      tags:
        - 'app | roles'
      security:
        - appToken: [ ]
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/RoleSummary"
                - properties:
                    username:
                      type: string
                      readOnly: true
      responses:
        200:
          description: Papel alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/roles/{roleId}/enabled:
    patch:
      summary: Habilita / Desabilita perfil
      tags:
        - 'app | roles'
      security:
        - appToken: [ ]
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
      responses:
        200:
          description: Papel alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/users:
    get:
      summary: 'Listagem de usuários'
      tags:
        - 'app | users'
      security:
        - appToken: [ ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/UserOrderBy'
        - $ref: '#/components/parameters/sector'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/UserSearchIn'
      responses:
        200:
          description: Lista de usuários (paginada)
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserSummary"
                  page:
                    type: integer
                  pageSize:
                    type: integer
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      summary: 'Criação de usuários'
      tags:
        - 'app | users'
      security:
        - appToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/User"
                - properties:
                    password:
                      $ref: '#/components/schemas/PasswordSchema'
              required: ['password']
      responses:
        200:
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        403:
          $ref: "#/components/responses/Forbidden"
  /app/users/{userId}:
    get:
      summary: 'Detalhes de usuário'
      tags:
        - 'app | users'
      security:
        - appToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes de usuário
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: Atualização de usuário
      tags:
        - 'app | users'
      security:
        - appToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/User"
                - properties:
                    username:
                      type: string
                      readOnly: true
      responses:
        200:
          description: Usuário alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/users/{userId}/disabled:
    put:
      summary: Habilita/desabilita usuário
      tags:
        - 'app | users'
      security:
        - appToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        204:
          description: Usuário alterado com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/users/me/password:
    put:
      summary: 'Atualização de senha do usuário'
      tags:
        - 'app | users'
      security:
        - appToken: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  $ref: '#/components/schemas/PasswordSchema'
                new_password:
                  $ref: '#/components/schemas/PasswordSchema'
      responses:
        204:
          description: Senha atualizada com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/users/me/permissions:
    get:
      summary: Permissões do usuário logado
      tags:
        - 'app | users'
      security:
        - appToken: [ ]
      responses:
        200:
          description: Regras de permissão do usuário
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/users/many/template:
    get:
      summary: Retorna a planilha template para utilizar na importação de usuários.
      tags:
        - 'app | users'
      security:
        - appToken: [ ]
      responses:
        200:
          description: Link da planilha template
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/users/many/url:
    get:
      summary: Cria url para upload de planilha de importação de usuários
      description: O arquivo deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'app | users'
      security:
        - appToken: [ ]
      parameters:
        - name: ContentType
          in: query
          required: true
          schema:
            description: Aceita mimes 'application/vnd.*'
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
        - name: ContentDisposition
          in: query
          required: true
          schema:
            description: Disposition
            type: string
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: Confirma upload de planilha e finaliza importação de usuários
      tags:
        - 'app | users'
      security:
        - appToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ['filePath']
              properties:
                filePath:
                  type: string
      responses:
        200:
          description: Dados e status da tarefa assíncrona de importação de usuários.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncTask"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
  /app/employees/me/climate-checks:
    get:
      summary: Indica se há pesquisa de clima pendente
      tags:
        - 'app | climate-checks'
      security:
        - appToken: [ ]
      responses:
        200:
          description: '`true` indica que há resposta pendente'
          content:
            application/json:
              schema:
                type: boolean
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      summary: Registra respostas de pesquisa de clima
      tags:
        - 'app | climate-checks'
      security:
        - appToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: ['happy', 'productive', 'supported', sector]
              properties:
                happy:
                  type: integer
                  minimum: 1
                  maximum: 5
                productive:
                  type: integer
                  minimum: 1
                  maximum: 5
                supported:
                  type: integer
                  minimum: 1
                  maximum: 5
                sector:
                  type: string
      responses:
        204:
          description: Respostas registradas com sucesso
        409:
          $ref: "#/components/responses/Conflict"
        403:
          $ref: "#/components/responses/Forbidden"
  /app/employees:
    get:
      summary: 'Listagem de colaboradores'
      tags:
        - 'app | employees'
      security:
        - appToken: [ ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/UserOrderBy'
        - $ref: '#/components/parameters/sector'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/EmployeeSearchIn'
        - $ref: '#/components/parameters/IncludeDisabled'
        - $ref: '#/components/parameters/deep'
        - $ref: '#/components/parameters/subordinateTo'
        - name: from
          in: query
          schema:
            type: string
            default: ''
        - name: includeSelf
          in: query
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Lista de colaboradores (paginada)
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/EmployeeSummary"
                        - type: object
                          properties:
                            hired_at:
                              type: string
                              format: date-time
                  page:
                    type: integer
                  pageSize:
                    type: integer
        403:
          $ref: "#/components/responses/Forbidden"
  /app/employees/{employeeId}:
    get:
      summary: 'Detalhes de colaborador'
      tags:
        - 'app | employees'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes de colaborador
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Employee"
                  - $ref: "#/components/schemas/EmployeeDetail"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: 'Atualização de dados do colaborador'
      tags:
        - 'app | employees'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeDetail"
      responses:
        200:
          description: Detalhes atualizados do colaborador
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/me/avatarUrl:
    get:
      summary: 'Retorna link de upload do avatar do usuário'
      description: O arquivo deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'app | employees'
      security:
        - appToken: [ ]
      parameters:
        - name: ContentType
          in: query
          required: true
          schema:
            description: Aceita mimes 'image/*'
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/employees/{employeeId}/pending-actions/:
    get:
      summary: 'Listagem de pendências do colaborador'
      tags:
        - 'app | pending actions'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
          examples:
            user_id:
              value: 4b00ae08-a2e8-4734-8797-bf753dcbfe86
            self:
              value: me
        - name: history
          in: query
          description: define se retorna últimas ou histórico
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/PendingActionsTypeQuery'
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PendingActionsStatus'
        - name: from
          in: query
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          schema:
            type: string
            format: date-time
        - name: next
          in: query
          description: ponto de partida da listagem
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: Lista de pendências do colaborador
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PendingAction"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/feedbacks/{employeeId}/{feedbackId}:
    get:
      summary: 'Detalhes do feedback enviado'
      tags:
        - 'app | feedbacks'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      responses:
        200:
          description: Detalhes do feedback enviado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedback"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/{employeeId}/feedbacks/:
    get:
      summary: 'Listagem de feedbacks do colaborador'
      tags:
        - 'app | feedbacks'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      responses:
        200:
          description: Lista de feedbacks do colaborador
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/FeedbackSummaryEmployee"
                    - $ref: '#/components/schemas/TimestampsAndControlFields'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: 'Cria feedback'
      tags:
        - 'app | feedbacks'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Feedback"
      responses:
        200:
          description: Feedback criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedback"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/{employeeId}/feedbacks/{feedbackId}:
    get:
      summary: 'Detalhes de feedback'
      tags:
        - 'app | feedbacks'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes de feedback
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedback"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: 'Atualiza feedback'
      tags:
        - 'app | feedbacks'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Feedback"
      responses:
        200:
          description: Feedback alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedback"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: 'Deleta feedback'
      tags:
        - 'app | feedbacks'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Feedback deletado com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/{employeeId}/feedbacks/{feedbackId}/read:
    put:
      summary: 'Marca feedback como lido'
      tags:
        - 'app | feedbacks'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        204:
          description: Feedback alterado para lido com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
  /app/employees/{employeeId}/feedbacks/{feedbackId}/status:
    put:
      summary: 'Atualiza status de feedback'
      tags:
        - 'app | feedbacks'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              $ref: "#/components/schemas/FeedbackStatus"
      responses:
        204:
          description: Feedback alterado para lido com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
  /app/employees/{employeeId}/evaluations/:
    get:
      summary: 'Listagem de avaliações do colaborador'
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
        - name: type
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/EvaluationType'
        - name: complete
          in: query
          required: false
          schema:
            type: boolean
        - name: from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: Lista de evaluation do colaborador
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/EvaluationSummary"
                    - $ref: '#/components/schemas/TimestampsAndControlFields'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: 'Cria avaliação'
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EvaluationCreate"
                - type: object
                  required:
                    - type
                  properties:
                    type:
                      type: string
                      enum: ['multidirectional.o', 'decision-matrix']
                    evaluators:
                      type: number
                    evaluatorsArray:
                      type: array
                      items:
                        type: string
                      description: "Obrigatório em multidirecional com responsáveis pré-selecionados (min.2)"
      responses:
        200:
          description: Avaliação criada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EvaluationSummary"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/employees/{employeeId}/evaluations/{evaluationId}/evaluators:
      get:
        summary: 'Lista responsáveis pela avaliação'
        tags:
          - 'app | evaluations'
        security:
          - appToken: [ ]
        parameters:
          - name: employeeId
            in: path
            required: true
            schema:
              type: string
          - name: evaluationId
            in: path
            required: true
            schema:
              type: string
              readOnly: true
        responses:
          200:
            description: Lista de responsáveis pela avaliação
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    allOf:
                      - properties:
                          status:
                            type: boolean
                            readOnly: true
                          responsible:
                            type: string
          403:
            $ref: "#/components/responses/Forbidden"
          404:
            $ref: "#/components/responses/NotFound"


  /app/employees/{employeeId}/evaluations/{evaluationId}:
    get:
      summary: 'Detalhes da avaliação do colaborador'
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: evaluationId
          in: path
          required: true
          schema:
            type: string
        - name: toFill
          in: query
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Detalhes de evaluation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Evaluation"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: 'Atualiza respostas da avaliação'
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: evaluationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EvaluationFullUpdate"
      responses:
        204:
          description: Respostas atualizadas
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: 'Remove avaliação'
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: evaluationId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Avaliação removida
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/employees/{employeeId}/evaluations/{evaluationId}/deadline:
    put:
      summary: 'Atualiza prazo da avaliação'
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: evaluationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: date-time
      responses:
        204:
          description: Prazo atualizado
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/{employeeId}/evaluations/{evaluationId}/status:
    put:
      summary: 'Finaliza avaliação'
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: evaluationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              enum: ['done']
      responses:
        200:
          description: Avaliação finalizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"

  /app/employees/{employeeId}/evaluations/{evaluationId}/read:
    put:
      summary: 'Marca avaliação como lida'
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: evaluationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        204:
          description: Avaliação alterada para lida com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"

  /app/employees/{employeeId}/evaluations/{evaluationId}/disclosed_to_employee:
    put:
      summary: 'Libera avaliação para colaborador'
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: evaluationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        204:
          description: Avaliação liberada com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"

  /app/news-feed:
    get:
      summary: 'Feed de notícias'
      tags:
        - 'app | news-feed'
      security:
        - appToken: [ ]
      responses:
        200:
          description: Feed de notícias.
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/NewsFeed"
                    - $ref: '#/components/schemas/TimestampsAndControlFields'
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      summary: 'Cria notícia para o feed'
      tags:
        - 'app | news-feed'
      security:
        - appToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/NewsFeedInput"
                - properties:
                    attachments_input:
                      type: array
                      items:
                        schema:
                          type: object
                          properties:
                            FileName:
                              type: string
                            ContentType:
                              type: object
                            ContentLength:
                              type: object
      responses:
        200:
          description: Notícia para o feed criada com sucesso
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/NewsFeedInput"
                  - properties:
                      video_upload_props:
                        type: object
                        properties:
                          id:
                            type: string
                          ks:
                            type: string
                          upload_token_id:
                            type: string
                          url:
                            type: string
                      attachments_upload_urls:
                        type: array
                        items:
                          schema:
                            type: object
                            properties:
                              url:
                                type: string
                              fields:
                                type: object
                  - $ref: "#/components/schemas/TimestampsAndControlFields"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/news-feed/{newsFeedId}:
    get:
      summary: 'Busca notícia do feed por id'
      tags:
        - 'app | news-feed'
      security:
        - appToken: [ ]
      parameters:
        - name: newsFeedId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Notícia do feed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewsFeed"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: 'Atualiza notícia do feed'
      tags:
        - 'app | news-feed'
      security:
        - appToken: [ ]
      parameters:
        - name: newsFeedId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/NewsFeedInput"
      responses:
        200:
          description: Notícia do feed alterada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewsFeed"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: 'Atualiza informações sobre o vídeo do feed'
      tags:
        - 'app | news-feed'
      security:
        - appToken: [ ]
      parameters:
        - name: newsFeedId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                video_type:
                  type: string
                  enum: ['none', 'youtubeUrl', 'uploadedVideo']
                video_url:
                  type: string
                video_uploaded_id:
                  type: string
      responses:
        200:
          description: Notícia do feed alterada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NewsFeed"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Deleta notícia do feed
      tags:
        - 'app | news-feed'
      security:
        - appToken: [ ]
      parameters:
        - name: newsFeedId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Notícia do feed deletada com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/news-feed/{newsFeedId}/imageUrl:
    get:
      summary: 'Retorna link de upload da imagem do post do feed de notícias'
      description: O arquivo deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'app | news-feed'
      security:
        - appToken: [ ]
      parameters:
        - name: newsFeedId
          in: path
          required: true
          schema:
            type: string
        - name: ContentType
          in: query
          required: true
          schema:
            description: Aceita mimes 'image/*'
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/news-feed/{newsFeedId}/attachment:
    get:
      summary: 'Retorna link de upload de um anexo do post do feed de notícias'
      description: O arquivo deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'app | news-feed'
      security:
        - appToken: [ ]
      parameters:
        - name: newsFeedId
          in: path
          required: true
          schema:
            type: string
        - name: FileName
          in: query
          required: true
          schema:
            description: Nome do arquivo
            type: string
        - name: ContentType
          in: query
          required: true
          schema:
            description: Tipo de arquivo
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/news-feed/{newsFeedId}/attachment/{attachmentId}:
    delete:
      summary: 'Deleta anexo específico do post do feed'
      tags:
        - 'app | news-feed'
      security:
        - appToken: [ ]
      parameters:
        - name: newsFeedId
          in: path
          required: true
          schema:
            type: string
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Anexo do post do feed deletado com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/news-feed/{newsFeedId}/comments/:
    post:
      summary: 'Cria comentário para o post'
      tags:
        - 'app | news-feed | comments'
      security:
        - appToken: []
      parameters:
        - name: newsFeedId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
      responses:
        201:
          description: Comentário criado com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    get:
      summary: 'Retrieve all comments for the post with pagination'
      tags:
        - 'app | news-feed | comments'
      security:
        - appToken: []
      parameters:
        - name: newsFeedId
          in: path
          required: true
          schema:
            type: string
          description: 'The ID of the news feed post to retrieve comments for'
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            default: 3
          description: 'The number of comments to return per page (default is 3)'
        - name: next
          in: query
          required: false
          schema:
            type: string
          description: 'The token for the next set of results, used for pagination'
      responses:
        200:
          description: 'List of comments for the post'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/news-feed/{newsFeedId}/comments/{newsFeedCommentId}:
    delete:
      summary: 'Deleta o comentário do post'
      tags:
        - 'app | news-feed | comments'
      security:
        - appToken: []
      parameters:
        - name: newsFeedId
          in: path
          required: true
          schema:
            type: string
        - name: newsFeedCommentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Comentário deletado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Comentário deletado com sucesso"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/coaching-registers:
    get:
      summary: 'Relatório de registro de coaching'
      tags:
        - 'app | coaching'
      security:
        - appToken: [ ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/employee'
        - $ref: '#/components/parameters/sector'
        - $ref: '#/components/parameters/FeedbackFrom'
        - $ref: '#/components/parameters/FeedbackTo'
        - $ref: '#/components/parameters/FormatType'
        - $ref: '#/components/parameters/order'
        - name: deep
          in: query
          description: Define se valores de setores relativos ao setor passado devem ser computados.
          required: false
          schema:
              type: boolean
        - name: manager
          in: query
          schema:
            type: string
        - name: orderBy
          in: query
          schema:
            type: string
            enum: [ 'created_at' ]
            default: 'created_at'
      responses:
        200:
          description: Relatório de registro de coaching
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/CoachingRegisterSummary"
                    - $ref: '#/components/schemas/TimestampsAndControlFields'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/employees/{employeeId}/coaching-registers/:
    get:
      summary: 'Listagem dos registros de coaching do colaborador'
      tags:
        - 'app | coaching'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      responses:
        200:
          description: Lista de registros de coaching do colaborador
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/CoachingRegisterSummary"
                    - $ref: "#/components/schemas/TimestampsAndControlFields"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: 'Cria registro de coaching'
      tags:
        - 'app | coaching'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CoachingRegister"
      responses:
        200:
          description: Relatório de coaching criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoachingRegister"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/{employeeId}/coaching-registers/{coachingRegisterId}:
    get:
      summary: 'Detalhes do registro de coaching'
      tags:
        - 'app | coaching'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: coachingRegisterId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes do registro de coaching
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoachingRegister"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: 'Atualiza registro de coaching'
      tags:
        - 'app | coaching'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: coachingRegisterId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CoachingRegister"
                - properties:
                    todos:
                      readOnly: true
      responses:
        200:
          description: Relatório de coaching alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoachingRegister"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/employees/{employeeId}/coaching-registers/{coachingRegisterId}/todos:
    post:
      summary: 'Adiciona tarefa ao registro de coaching'
      tags:
        - 'app | coaching'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
        - name: coachingRegisterId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CoachingRegisterTodo"
      responses:
        204:
          description: Tarefa adicionada com sucesso

  /app/employees/{employeeId}/coaching-registers/{coachingRegisterId}/todos/{todoId}:
    patch:
      summary: 'Atualiza tarefa do registro de coaching'
      tags:
        - 'app | coaching'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: coachingRegisterId
          in: path
          required: true
          schema:
            type: string
        - name: todoId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CoachingRegisterTodo"
      responses:
        204:
          description: Tarefa atualizada com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Deleta tarefa do registro de coaching
      tags:
        - 'app | coaching'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: coachingRegisterId
          in: path
          required: true
          schema:
            type: string
        - name: todoId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Tarefa deletada com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/{employeeId}/coaching-registers/{coachingRegisterId}/todos/{todoId}/completed_at:
    put:
      summary: 'Completa tarefa do registro de coaching'
      tags:
        - 'app | coaching'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: coachingRegisterId
          in: path
          required: true
          schema:
            type: string
        - name: todoId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              format: date-time
      responses:
        204:
          description: Tarefa completada com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"


  /app/employees/{employeeId}/coaching-registers/{coachingRegisterId}/read:
    put:
      summary: 'Marca registro de coaching como lido'
      tags:
        - 'app | coaching'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:

            type: string
        - name: coachingRegisterId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        204:
          description: Registro de coaching alterado para lido com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"

  /app/reprimands:
    get:
      summary: 'Relatório de advertências'
      tags:
        - 'app | reprimands'
      security:
        - appToken: [ ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/employee'
        - $ref: '#/components/parameters/sector'
        - $ref: '#/components/parameters/FeedbackFrom'
        - $ref: '#/components/parameters/FeedbackTo'
        - $ref: '#/components/parameters/FormatType'
        - $ref: '#/components/parameters/order'
        - name: deep
          in: query
          description: Define se valores de setores relativos ao setor passado devem ser computados.
          required: false
          schema:
              type: boolean
        - name: manager
          in: path
          schema:
            type: string
        - name: orderBy
          in: query
          schema:
            type: string
            enum: [ 'created_at' ]
            default: 'created_at'
      responses:
        200:
          description: Relatório de advertências
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/ReprimandSummary"
                    - $ref: '#/components/schemas/TimestampsAndControlFields'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/employees/{employeeId}/reprimands/:
    get:
      summary: 'Listagem de advertências do colaborador'
      tags:
        - 'app | reprimands'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      responses:
        200:
          description: Lista de advertências do colaborador
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/ReprimandSummary"
                    - $ref: '#/components/schemas/TimestampsAndControlFields'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: 'Cria advertência'
      tags:
        - 'app | reprimands'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reprimand"
      responses:
        200:
          description: Advertência criada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reprimand"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/{employeeId}/reprimands/{reprimandId}:
    get:
      summary: 'Detalhes de advertência'
      tags:
        - 'app | reprimands'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: reprimandId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes de advertência
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reprimand"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: 'Atualiza advertência'
      tags:
        - 'app | reprimands'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: reprimandId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Reprimand"
      responses:
        200:
          description: Advertência alterada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reprimand"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: 'Deleta advertência'
      tags:
        - 'app | reprimands'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: reprimandId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Advertência deletada com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/{employeeId}/reprimands/{reprimandId}/status:
    put:
      summary: 'Atualiza status de advertência'
      tags:
        - 'app | reprimands'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: reprimandId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              enum: ['GENERATED']
      responses:
        200:
          description: Advertência alterada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reprimand"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/{employeeId}/reprimands/{reprimandId}/attUrl:
    get:
      summary: 'Retorna link de upload para anexo de evidência'
      description: O arquivo deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'app | reprimands'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: reprimandId
          in: path
          required: true
          schema:
            type: string
        - name: ContentType
          in: query
          required: true
          schema:
            description: Aceita mimes 'image/*' e 'application/pdf'
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
        - name: ContentDispostion
          in: query
          required: true
          schema:
            description: Disposition e nome do arquivo
            type: string
        - name: date
          in: query
          required: true
          schema:
            description: Data que a advertência foi dada
            type: string
            format: date-time
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/suspensions:
    get:
      summary: 'Relatório de suspensão'
      tags:
        - 'app | suspensions'
      security:
        - appToken: [ ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/employee'
        - $ref: '#/components/parameters/sector'
        - $ref: '#/components/parameters/FeedbackFrom'
        - $ref: '#/components/parameters/FeedbackTo'
        - $ref: '#/components/parameters/FormatType'
        - $ref: '#/components/parameters/order'
        - name: deep
          in: query
          description: Define se valores de setores relativos ao setor passado devem ser computados.
          required: false
          schema:
              type: boolean
        - name: manager
          in: path
          schema:
            type: string
        - name: orderBy
          in: query
          schema:
            type: string
            enum: [ 'created_at' ]
            default: 'created_at'
      responses:
        200:
          description: Relatório de suspensão
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/SuspensionSummary"
                    - $ref: '#/components/schemas/TimestampsAndControlFields'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/employees/{employeeId}/suspensions/:
    get:
      summary: 'Listagem de suspensões do colaborador'
      tags:
        - 'app | suspensions'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      responses:
        200:
          description: Lista de suspensões do colaborador
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/SuspensionSummary"
                    - $ref: '#/components/schemas/TimestampsAndControlFields'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: 'Cria suspensão'
      tags:
        - 'app | suspensions'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Suspension"
      responses:
        200:
          description: Suspensão criada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Suspension"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
  /app/employees/{employeeId}/suspensions/{suspensionId}:
    get:
      summary: 'Detalhes de suspensão'
      tags:
        - 'app | suspensions'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: suspensionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes de suspensão
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Suspension"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: 'Atualiza suspensão'
      tags:
        - 'app | suspensions'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: suspensionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Suspension"
      responses:
        200:
          description: Suspensão alterada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Suspension"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
    delete:
      summary: 'Deleta suspensão'
      tags:
        - 'app | suspensions'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: suspensionId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Suspensão deletada com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/{employeeId}/suspensions/{suspensionId}/status:
    put:
      summary: 'Atualiza status de suspensão'
      tags:
        - 'app | suspensions'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: suspensionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              enum: ['GENERATED']
      responses:
        200:
          description: Suspensão alterada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Suspension"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/{employeeId}/suspensions/{suspensionId}/attUrl:
    get:
      summary: 'Retorna link de upload para anexo de evidência'
      description: O arquivo deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'app | suspensions'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: suspensionId
          in: path
          required: true
          schema:
            type: string
        - name: ContentType
          in: query
          required: true
          schema:
            description: Aceita mimes 'image/*' e 'application/pdf'
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
        - name: ContentDispostion
          in: query
          required: true
          schema:
            description: Disposition e nome do arquivo
            type: string
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/employees/{employeeId}/timelines/:
    get:
      summary: 'Histórico de eventos relacionados ao colaborador'
      tags:
        - 'app | timelines'
      security:
        - appToken: [ ]
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
          examples:
            user_id:
              value: 4b00ae08-a2e8-4734-8797-bf753dcbfe86
            self:
              value: me
        - name: from
          in: query
          description: data de início
          required: false
          schema:
            type: string
            format: date-time
        - name: next
          in: query
          description: ponto de partida da listagem
          required: false
          schema:
            type: string
        - name: to
          in: query
          description: data de fim
          required: false
          schema:
            type: string
            format: date-time
        - name: type
          in: query
          description: tipo da ação
          required: false
          schema:
            type: string
      responses:
        200:
          description: Lista de eventos relacionados ao colaborador
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Timeline"
                  next:
                    type: string
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/employees/{employeeId}/history:
    get:
      summary: Consulta histórico de atualizações dos usuários
      tags:
        - 'app | employees'
      security:
        - appToken: [ ]
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: from
          in: query
          description: data de início
          required: false
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: data de fim
          required: false
          schema:
            type: string
            format: date-time
        - name: next
          in: query
          description: ponto de partida da listagem
          required: false
          schema:
            type: string
      responses:
        200:
          description: Histórico de atualizações
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserUpdateHistoryItem'

  /app/employees/{employeeId}/vacations/:
    get:
      summary: 'Listagem dos registros de férias do colaborador'
      tags:
        - 'app | vacations'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      responses:
        200:
          description: Lista de registros de férias do colaborador
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Vacation"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: 'Cria registro de férias'
      tags:
        - 'app | vacations'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Vacation"
      responses:
        200:
          description: Relatório de férias criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vacation"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
  /app/employees/{employeeId}/vacations/{vacationId}:
    get:
      summary: 'Detalhes do registro de férias'
      tags:
        - 'app | vacations'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: vacationId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes do registro de férias
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vacation"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: 'Atualiza registro de férias'
      tags:
        - 'app | vacations'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: vacationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Vacation"

      responses:
        200:
          description: Registro de férias alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vacation"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
    delete:
      summary: 'Deleta registro de férias'
      tags:
        - 'app | vacations'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: vacationId
          in: path
          required: true
          schema:
            type: string

      responses:
        204:
          description: Registro de férias deletado com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/employees/{employeeId}/absences/:
    get:
      summary: 'Listagem dos registros de ausências do colaborador'
      tags:
        - 'app | absences'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/AbsencesType'
            readOnly: true
      responses:
        200:
          description: Lista de registros de ausências do colaborador
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Absence"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: 'Cria registro de ausências'
      tags:
        - 'app | absences'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Absence"
      responses:
        200:
          description: Relatório de ausência criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Absence"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
  /app/employees/{employeeId}/absences/{absenceId}:
    get:
      summary: 'Detalhes do registro de ausência'
      tags:
        - 'app | absences'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: absenceId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes do registro de ausência
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Absence"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: 'Atualiza registro de ausência'
      tags:
        - 'app | absences'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: absenceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Absence"

      responses:
        200:
          description: Registro de ausência alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Absence"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
    delete:
      summary: 'Deleta registro de ausência'
      tags:
        - 'app | absences'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: absenceId
          in: path
          required: true
          schema:
            type: string

      responses:
        204:
          description: Registro de ausência deletado com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"


  /app/evaluations:
    get:
      summary: listagem geral de avaliações
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/order'
        - name: orderBy
          in: query
          schema:
            type: string
            enum: [ 'created_at' ]
            default: 'created_at'
        - $ref: '#/components/parameters/created_by'
        - $ref: '#/components/parameters/employee'
        - name: responsible
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/sector'
        - $ref: '#/components/parameters/deep'
        - $ref: '#/components/parameters/FeedbackFrom'
        - $ref: '#/components/parameters/FeedbackTo'
        - $ref: '#/components/parameters/EvaluationDaysLate'
        - $ref: '#/components/parameters/EvaluationType'
        - $ref: '#/components/parameters/EvaluationOnlyLast'
        - $ref: '#/components/parameters/EvaluationStatus'
        - $ref: '#/components/parameters/FormatType'
      responses:
        200:
          description: Lista de avaliações
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/EvaluationSummary"
                  page:
                    type: integer
                  pageSize:
                    type: integer
                  total:
                    type: integer
        202:
          description: Código de identificação do relatório e status de exportação
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncTask"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"

  /app/evaluations/matrix/summary:
    get:
      summary: Sumário de matriz de decisão
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: string
        - name: to
          in: query
          required: true
          schema:
            type: string
        - name: sector
          in: query
          required: true
      responses:
        200:
          description: Número de avaliações por status
          content:
            application/json:
              schema:
                items:
                    type: array
                    items:
                      $ref: "#/components/schemas/EvaluationSummary"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"

  /app/evaluations/summary:
    get:
      summary: Contagem de avaliações por status
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - $ref: '#/components/parameters/created_by'
        - $ref: '#/components/parameters/employee'
        - name: responsible
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/sector'
        - $ref: '#/components/parameters/deep'
        - $ref: '#/components/parameters/FeedbackFrom'
        - $ref: '#/components/parameters/FeedbackTo'
        - $ref: '#/components/parameters/EvaluationDaysLate'
        - $ref: '#/components/parameters/EvaluationType'
      responses:
        200:
          description: Número de avaliações por status
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"

  /app/evaluations/multidirectional/templates:
    get:
      summary: listagem dos templates de avaliações multidirecionais
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - name: lang
          in: query
          required: true
          schema:
            type: string
            enum: ['pt-BR']
      responses:
        200:
          description: Lista de templates de avaliações
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                    title:
                      type: string
        400:
          $ref: "#/components/responses/BadRequest"
  /app/evaluations/multidirectional/templates/{type}:
    get:
      summary: Detalhes do template de avaliação multidirecional
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - name: lang
          in: query
          required: true
          schema:
            type: string
            enum: ['pt-BR']
        - name: type
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Template de avaliação multidirecional
          content:
            application/json:
              schema:
                type: object
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"

  /app/evaluations/matrix/template:
    get:
      summary: Detalhes do template de matriz de decisão
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - name: lang
          in: query
          required: true
          schema:
            type: string
            enum: ['pt-BR']
      responses:
        200:
          description: Template de matriz de decisão
          content:
            application/json:
              schema:
                type: object
                properties:
                  lang:
                    type: string
                  type:
                    type: string
                  title:
                    type: string
                  positive:
                    type: boolean
                  schema:
                    type: object
                    properties:
                      type:
                        type: string
                      minimum:
                        type: integer
                      maximum:
                        type: integer
                  competencies:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        text:
                          type: string
                  questions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        competency:
                          type: string
                        text:
                          type: string
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"

  /app/evaluations/matrix:
    put:
      summary: 'Atualiza respostas de múltiplas avaliações de matriz de decisão'
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                allOf:
                  - properties:
                      id:
                        type: string
                      employee:
                        type: string
                  - $ref: "#/components/schemas/EvaluationSkills"
      responses:
        204:
          description: Respostas atualizadas
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/evaluations/matrix/status:
    put:
      summary: 'Finaliza múltiplas avaliações de matriz de decisão'
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                allOf:
                  - properties:
                      id:
                        type: string
                      employee:
                        type: string
                      status:
                        type: string
                        enum: ['done']
      responses:
        204:
          description: Respostas finalizadas
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/evaluations/ape/template:
    get:
      summary: Detalhes do template de APE
      tags:
        - 'app | evaluations'
      security:
        - appToken: [ ]
      parameters:
        - name: lang
          in: query
          required: true
          schema:
            type: string
            enum: ['pt-BR']
      responses:
        200:
          description: Template de APE
          content:
            application/json:
              schema:
                type: object
                properties:
                  lang:
                    type: string
                  type:
                    type: string
                  title:
                    type: string
                  positive:
                    type: boolean
                  schema:
                    type: object
                    properties:
                      type:
                        type: string
                      minimum:
                        type: integer
                      maximum:
                        type: integer
                  competencies:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        text:
                          type: string
                  questions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        competency:
                          type: string
                        text:
                          type: string
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"

  /app/feedbacks:
    get:
      summary: listagem geral de feedbacks
      tags:
        - 'app | feedbacks'
      security:
        - appToken: [ ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/created_by'
        - $ref: '#/components/parameters/employee'
        - $ref: '#/components/parameters/sector'
        - $ref: '#/components/parameters/FeedbackFrom'
        - $ref: '#/components/parameters/FeedbackTo'
        - $ref: '#/components/parameters/FeedbackType'
        - $ref: '#/components/parameters/FormatType'
        - $ref: '#/components/parameters/order'
        - name: deep
          in: query
          description: Define se valores de setores relativos ao setor passado devem ser computados.
          required: false
          schema:
              type: boolean
        - name: orderBy
          in: query
          schema:
            type: string
            enum: [ 'created_at' ]
            default: 'created_at'
      responses:
        200:
          description: Lista de feedbacks
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/FeedbackSummary"
                  page:
                    type: integer
                  pageSize:
                    type: integer
                  total:
                    type: integer
        202:
          description: Código de identificação do relatório e status de exportação
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncTask"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"

  /app/templates/:
    get:
      summary: 'Listagem de templates da conta'
      tags:
        - 'app | templates'
      security:
        - appToken: [ ]
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum: ['Feedback', 'Reprimand', 'Suspension']
            readOnly: true
      responses:
        200:
          description: Lista de templates da conta
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/TemplateSummary"
                    - $ref: '#/components/schemas/TimestampsAndControlFields'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: 'Cria template'
      tags:
        - 'app | templates'
      security:
        - appToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
      responses:
        200:
          description: Template criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/templates/{templateId}/:
    get:
      summary: 'Detalhes de template'
      tags:
        - 'app | templates'
      security:
        - appToken: [ ]
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes de templete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: 'Atualiza template'
      tags:
        - 'app | templates'
      security:
        - appToken: [ ]
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Template"
      responses:
        200:
          description: Template alterada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: 'Deleta template'
      tags:
        - 'app | templates'
      security:
        - appToken: [ ]
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: template deletada com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/trainings:
    post:
      summary: Cria treinamento
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Training'
      responses:
        200:
          description: Treinamento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
        400:
          $ref: '#/components/responses/BadRequest'
    get:
      summary: Listagem de treinamentos da conta
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/TrainingOrderBy'
      responses:
        200:
          description: Listagem de treinamentos da conta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
        404:
          $ref: '#/components/responses/NotFound'
  /app/trainings/{trainingId}:
    get:
      summary: Detalhes do treinamento
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes do treinamento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Training'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      summary: Atualização de treinamento
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Training"
      responses:
        200:
          description: Treinamento alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Training"
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/trainings/{trainingId}/disabled:
    put:
      summary: Habilita/desabilita treinamento
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: boolean
      responses:
        204:
          description: Treinamento alterado com sucesso
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/trainings/{trainingId}/thumbnailUrl:
    get:
      summary: 'Retorna link de upload da thumbnail do treinamento'
      description: O arquivo deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: ContentType
          in: query
          required: true
          schema:
            description: Aceita mimes 'image/*'
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/trainings/{trainingId}/topics:
    post:
      summary: Cria tópico de treinamento
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingTopic'
      responses:
        200:
          description: Tópico de treinamento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingTopic'
        400:
          $ref: '#/components/responses/BadRequest'
    get:
      summary: Listagem de tópicos do treinamento
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Listagem de tópicos do treinamento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingTopic'
        404:
          $ref: '#/components/responses/NotFound'
  /app/trainings/{trainingId}/topics/{topicId}:
    get:
      summary: Detalhes do tópico do treinamento
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes do tópico do treinamento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingTopic'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      summary: Atualização do tópico do treinamento
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrainingTopic"
      responses:
        200:
          description: Tópico alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingTopic"
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Deletar Tópico
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Tópico deletado com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/trainings/{trainingId}/topics/{topicId}/contents/video:
    post:
      summary: Cria video para conteúdo
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Conteúdo criado e adicionado ao tópico com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingTopic'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: '#/components/responses/NotFound'
  /app/trainings/{trainingId}/topics/{topicId}/contents:
    post:
      summary: Cria conteúdo do tópico
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Content'
      responses:
        200:
          description: Conteúdo criado e adicionado ao tópico com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingTopic'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: '#/components/responses/NotFound'
  /app/trainings/{trainingId}/topics/{topicId}/contents/{contentId}:
    get:
      summary: Detalhes do conteúdo
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes do conteúdo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: '#/components/responses/NotFound'
    put:
      summary: Atualiza conteúdo
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Content"
      responses:
        200:
          description: Conteúdo alterado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Content"
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/trainings/{trainingId}/topics/{topicId}/contents/{contentId}/attUrl:
    get:
      summary: 'Retorna link de upload para anexos de material complementar'
      description: O arquivo deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
        - name: contentId
          in: path
          required: true
          schema:
            type: string
        - name: ContentType
          in: query
          required: true
          schema:
            description: Aceita mimes 'image/*', 'application/pdf', 'application/vnd.ms-excel', 'application/msword' e 'text/plain'
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
        - name: ContentDisposition
          in: query
          required: true
          schema:
            description: Disposition
            type: string
            enum: ['inline']
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
        - name: FileName
          in: query
          required: true
          schema:
            description: Nome do arquivo
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/trainings/{trainingId}/topics/{topicId}/contents/{contentId}/attachments/{attachmentId}:
    delete:
      summary: Exclusão de anexo de material complementar
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
        - name: contentId
          in: path
          required: true
          schema:
            type: string
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Anexo excluido com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/trainings/{trainingId}/topics/{topicId}/contents/{contentId}/captions:
    get:
      summary: Listagem de legendas de um conteúdo do tipo video
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Listagem de legendas
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: Upload de legenda de conteúdo do tipo vídeo
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                language:
                  $ref: "#/components/schemas/LanguagesEnums"
              required:
                - file
                - language
            encoding:
              file:
                contentType: text/vtt
      responses:
        200:
          description: Legenda criada
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/trainings/{trainingId}/topics/{topicId}/contents/{contentId}/captions/{captionId}:
    patch:
      summary: Edição de legenda
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: string
        - name: captionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
            encoding:
              file:
                contentType: text/vtt
      responses:
        200:
          description: Legenda editada
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Exclusão de legenda
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            type: string
        - name: captionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Legenda excluida com sucesso
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/trainings/all/progress:
    get:
      summary: Lista todos os progressos de treinamento
      tags:
        - 'app | trainings'
      security:
        - adminToken: [ ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/order'
        - name: orderBy
          in: query
          schema:
            type: string
            enum:
              - training
              - employee
              - created_at
              - created_by
              - updated_at
              - updated_by
        - name: training
          in: query
          schema:
            type: string
        - name: title
          in: query
          schema:
            type: string
        - name: employee
          in: query
          schema:
            type: string
        - name: categories
          in: query
          schema:
            type: array
        - name: sector
          in: query
          schema:
            type: string
        - name: from
          in: query
          schema:
            type: string
        - name: to
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/FormatType'
        - name: deep
          in: query
          description: Define se valores de setores relativos ao setor passado devem ser computados.
          required: false
          schema:
              type: boolean
      responses:
        200:
          description: Lista de progressos
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  pageSize:
                    type: integer
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/TrainingProgress'
        202:
          description: Código de identificação do relatório e status de exportação
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncTask"
        403:
          $ref: "#/components/responses/Forbidden"

  /app/employees/{employeeId}/trainings/all/progress:
    get:
      summary: 'Progressos do colaborador nos treinamentos'
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
          examples:
            user_id:
              value: 4b00ae08-a2e8-4734-8797-bf753dcbfe86
            self:
              value: me
      responses:
        200:
          description: Progressos do Colaborador nos Treinamentos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TrainingProgress"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/employees/{employeeId}/trainings/{trainingId}/progress:
    get:
      summary: 'Progresso do colaborador no treinamento'
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
          examples:
            user_id:
              value: 4b00ae08-a2e8-4734-8797-bf753dcbfe86
            self:
              value: me
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      responses:
        200:
          description: Progresso do Colaborador no Treinamento
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingProgress"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/employees/{employeeId}/trainings/{trainingId}/topics/{topicId}/progress:
    put:
      summary: 'Registra progresso do colaborador no tópico do treinamento'
      tags:
        - 'app | trainings'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
          examples:
            user_id:
              value: 4b00ae08-a2e8-4734-8797-bf753dcbfe86
            self:
              value: me
        - name: trainingId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
        - name: topicId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                progress:
                  type: number
                  minimum: 0
                  maximum: 10000
      responses:
        204:
          description: Progresso registrado com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/training-trails:
    post:
      summary: Cria trilha de treinamento
      tags:
        - 'app | training-trails'
      security:
        - appToken: [ ]
      parameters:
      - $ref: '#/components/parameters/order'
      - $ref: '#/components/parameters/TrainingOrderBy'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingTrail'
      responses:
        200:
          description: Trilha de treinamento criada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingTrail'
        400:
          $ref: '#/components/responses/BadRequest'
    get:
      summary: Listagem de trilhas de treinamentos da conta
      tags:
        - 'app | training-trails'
      security:
        - appToken: [ ]
      parameters:
        - name: summary
          in: query
          schema:
            type: boolean
        - name: detailed
          in: query
          schema:
            type: boolean
        - name: from
          in: query
          schema:
            type: string
        - name: to
          in: query
          schema:
            type: string
        - name: sector
          in: query
          schema:
            type: string
        - name: category
          in: query
          schema:
              type: string
              enum: ['', 'EDUCATION_AND_CULTURE', 'OPERATIONAL_TRAINING', 'ADVANCED_TRAINING']
      responses:
        200:
          description: Listagem de trilhas de treinamentos da conta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingTrail'
        404:
          $ref: '#/components/responses/NotFound'

  /app/employees/{employeeId}/training-trails:
    get:
      summary: Listagem de trilhas de treinamentos de colaborador
      tags:
        - 'app | training-trails'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Listagem de trilhas de treinamentos de colaborador
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/TrainingTrail'
                    - properties:
                        training_progresses:
                          type: object
                        progress:
                          type: number
        404:
          $ref: '#/components/responses/NotFound'

  /app/employees/{employeeId}/training-trails/{trainingTrailId}:
    get:
      summary: Detalhes da trilha de treinamento por colaborador
      tags:
        - 'app | training-trails'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: trainingTrailId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes da trilha de treinamento
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/TrainingTrail'
                  - properties:
                      training_progresses:
                        type: object
                      progress:
                        type: number
        404:
          $ref: '#/components/responses/NotFound'

  /app/employees/{employeeId}/training-trails/{trainingTrailId}/trainings:
    get:
      summary: Listagem de treinamentos de trilha para colaborador
      tags:
        - 'app | training-trails'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
        - name: trainingTrailId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Listagem de treinamentos de trilha para colaborador
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                      - $ref: "#/components/schema/Training"
                      - $ref: '#/components/schemas/TimestampsAndControlFields'
        404:
          $ref: '#/components/responses/NotFound'

  /app/training-trails/{trainingTrailId}:
    get:
      summary: Detalhes da trilha de treinamento
      tags:
        - 'app | training-trails'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingTrailId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detalhes da trilha de treinamento
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingTrail'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      summary: Atualização da trilha de treinamento
      tags:
        - 'app | training-trails'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingTrailId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrainingTrail"
      responses:
        200:
          description: Trilha alterada com sucesso
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/TrainingTrail"
                  - properties:
                      trainings:
                        type: array
                        items:
                          type: string
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/training-trails/{trainingTrailId}/disabled:
    put:
      summary: Habilita/desabilita trilha treinamento
      tags:
        - 'app | training-trails'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingTrailId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: boolean
      responses:
        204:
          description: Trilha alterada com sucesso
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/training-trails/{trainingTrailId}/thumbnailUrl:
    get:
      summary: 'Retorna link de upload da thumbnail da trilha de treinamento'
      description: O arquivo deve ser enviado usando um POST para a `url` com FormData contendo os campos retornados em `fields` e o arquivo em si.
      tags:
        - 'app | training-trails'
      security:
        - appToken: [ ]
      parameters:
        - name: trainingTrailId
          in: path
          required: true
          schema:
            type: string
        - name: ContentType
          in: query
          required: true
          schema:
            description: Aceita mimes 'image/*'
            type: string
        - name: ContentLength
          in: query
          required: true
          schema:
            description: Tamanho do anexo em bytes
            type: number
      responses:
        200:
          description: Link de upload
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  fields:
                    type: object
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"


  /app/tutorials:
    get:
      summary: 'Listagem de tutoriais'
      tags:
        - 'app | tutorials'
      security:
        - appToken: [ ]
      responses:
        200:
          description: Lista de Tutoriais
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TutorialSummary"
        403:
          $ref: "#/components/responses/Forbidden"
  /app/tutorials/{tutorialId}/url:
    get:
      summary: 'Recupera url p/ play de video'
      tags:
        - 'app | tutorials'
      security:
        - appToken: [ ]
      parameters:
        - name: tutorialId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Url de play do video
          content:
            text/plain:
              schema:
                type: string
                format: url
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/notes/:
    post:
      summary: 'Cria nota'
      tags:
        - 'app | notes'
      security:
        - appToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Note"
      responses:
        204:
          description: Nota criada com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"

  /app/async-tasks/{asyncTaskId}:
    get:
      summary: 'Recupera informações sobre status de alguma tarefa assíncrona'
      tags:
        - 'app | asyncTasks'
      security:
        - appToken: [ ]
      parameters:
        - name: asyncTaskId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Dados e status da tarefa assíncrona solicitada.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AsyncTask"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"

  /app/faqs:
    get:
      summary: 'Listagem do FAQ'
      tags:
        - 'app | faqs'
      security:
        - appToken: [ ]
      responses:
        200:
          description: Lista de FAQs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FaqSummary"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/users/me/onboarding:
    get:
      summary: 'Onboarding do usuário'
      tags:
        - 'app | onboarding'
      security:
        - appToken: [ ]
      responses:
        200:
          description: Onboarding do usuário
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Onboarding"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/users/me/onboarding/features:
    patch:
      summary: 'Atualiza onboarding'
      tags:
        - 'app | onboarding'
      security:
        - appToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object

      responses:
        200:
          description: Atualiza onboarding do usuario
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Onboarding"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/{employeeId}/unseen-items/{feature}:
    get:
      summary: 'Quantidade de itens não lidos de uma funcionalidade'
      tags:
        - 'app | unseen-items'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
        - name: feature
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Quantidade de itens não lidos de funcionalidade
          content:
            application/json:
              schema:
                type: number
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

  /app/dismiss-interviews:
    get:
      summary: 'Listagem de entrevistas de saída por setor e Relatório de demissões'
      tags:
        - 'app | dismiss-interviews'
      security:
        - appToken: [ ]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/employee'
        - $ref: '#/components/parameters/sector'
        - $ref: '#/components/parameters/FeedbackFrom'
        - $ref: '#/components/parameters/FeedbackTo'
        - $ref: '#/components/parameters/FormatType'
        - $ref: '#/components/parameters/order'
        - name: deep
          in: query
          description: Define se valores de setores relativos ao setor passado devem ser computados.
          required: false
          schema:
              type: boolean
        - name: manager
          in: query
          schema:
            type: string
        - name: orderBy
          in: query
          schema:
            type: string
            enum: [ 'dismissed_at' ]
            default: 'dismissed_at'
      responses:
        200:
          description: Listagem de entrevistas de saída por setor
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/DismissInterviewSummary"
                    - $ref: '#/components/schemas/TimestampsAndControlFields'
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /app/employees/{employeeId}/dismiss-interviews:
    get:
      summary: 'Listagem de entrevistas de saída por colaborador'
      tags:
        - 'app | dismiss-interviews'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      responses:
        200:
          description: Listagem de entrevistas de saída por colaborador
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DismissInterviewSummary"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: 'Criar entrevista de saída de colaborador'
      tags:
        - 'app | dismiss-interviews'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DismissInterviewSummary"
      responses:
        204:
          description: Entrevista de saída criada com sucesso
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
  /app/employees/{employeeId}/dismiss-interviews/{dismissInterviewId}:
    get:
      summary: 'Detalhes da entrevista de saída de colaborador'
      tags:
        - 'app | dismiss-interviews'
      security:
        - appToken: [ ]
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
        - name: dismissInterviewId
          in: path
          required: true
          schema:
            type: string
            readOnly: true
      responses:
        200:
          description: Detalhes da entrevista de saída do colaborador
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DismissInterview"
        400:
          $ref: "#/components/responses/BadRequest"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-API-KEY
      description: API Key para uso interno
    appToken:
      type: http
      scheme: bearer
      description: Token do app
    adminToken:
      type: http
      scheme: bearer
      description: Token do admin
  responses:
    Accepted:
      description: Requisição aceita, avaliações serão criadas.
    BadRequest:
      description: Um ou mais parâmetros de entrada estão inválidos.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Error"
              - properties:
                    validation_details:
                      type: array
                      description: Erros de validação
                      items:
                        type: string
                        description: Detalhes de cada erro de validação
    Unauthorized:
      description: Credenciais inválidas
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Permissão Negada.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: Recurso não encontrado.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Conflict:
      description: Conflito com outro recurso já existente
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    TooManyRequests:
      description: Muitas requisições feitas em um curto intervalo de tempo. Tentar novamente depois.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    UnprocessableEntity:
      description: O servidor entende o conteúdo, mas não pode processá-lo.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: Token de acesso
        expires_in:
          type: number
          description: Tempo de expiração do token (em segundos)
        type:
          type: string
          description: Tipo de autenticação
          enum: [Bearer]
    Error:
      type: object
      properties:
        type:
          type: string
          enum: ['about:blank']
        title:
          type: string
          description: Nome do HTTP status code
        status:
          type: integer
          description: HTTP status code
        detail:
          type: string
          description: Detalhes do erro
    Comment:
      type: object
      properties:
        newsFeedId:
          type: string
          example: "935da47b-19bd-450a-926d-a23b83ad8c4b"
        updated_at:
          type: string
          format: date-time
          example: "2024-08-23T20:03:51.323Z"
        updated_by:
          type: string
          example: "rh"
        created_at:
          type: string
          format: date-time
          example: "2024-08-23T20:03:51.323Z"
        id:
          type: string
          example: "2635b39a-00f2-48f5-aa06-59d263594d90"
        text:
          type: string
          example: "Terceiro comentário para o POST de ID - 935da47b-19bd-450a-926d-a23b83ad8c4b"
        _PostCommentId:
          type: string
          example: "935da47b-19bd-450a-926d-a23b83ad8c4b#2635b39a-00f2-48f5-aa06-59d263594d90"
        employee:
          type: string
          example: "rh"
        created_by:
          type: string
          example: "rh"
        account:
          type: string
          example: "pioneer"

    AccountResponsible:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
          writeOnly: true
    BoletoSummary:
      type: object
      allOf:
        - properties:
            id:
              type: string
              format: uuid
            status:
              type: string
              enum: ['Paid', 'Expired', 'Pending']
            value:
              type: number
              format: integer
              description: value in cents
            payment:
              type: object
              properties:
                boleto:
                  type: object
                  properties:
                    url:
                      type: string
                      format: uri
                    expirationDate:
                      type: string
                      format: date
                      description: Expiration day as YYYY-MM-DD
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    PublicAccountSummary:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        logo:
          type: string
          format: url
          nullable: true
        subdomain:
          type: string
          pattern: '^[A-Za-z0-9](?:[A-Za-z0-9-]{0,61}[A-Za-z0-9])?$'
        hasReachedMaxActiveUsers:
          type: boolean
          readOnly: true
        modules:
          type: object
          properties:
            climateCheck:
              type: boolean
    FaqSummary:
      type: object
      allOf:
        - $ref: '#/components/schemas/Faq'
        - properties:
            disabled:
              type: boolean
              readOnly: true
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    TutorialSummary:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        thumbnail:
          type: string
          format: url
        tags:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            type: string
    VideoSummary:
      type: object
      allOf:
        - properties:
            id:
              type: string
              readOnly: true
            title:
              type: string
            thumbnail:
              type: string
              format: url
            tags:
              type: array
              items:
                type: string
            roles:
              type: array
              items:
                type: string
            disabled:
              type: boolean
        - $ref: '#/components/schemas/TimestampsAndControlFields'
      required: ['title', 'thumbnail', 'tags', 'disabled']
    Faq:
      type: object
      allOf:
        - properties:
            id:
              type: string
              readOnly: true
            question:
              type: string
            answer:
              type: string
            tags:
              type: array
              items:
                type: string
    LightAccountSummary:
      type: object
      allOf:
        - properties:
            id:
              type: string
            name:
              type: string
            is_demo:
              type: boolean
              default: false
              description: 'Sinaliza se a conta é ou não de demonstração'
    LightUserSummary:
      type: object
      allOf:
        - properties:
            id:
              type: string
            name:
              type: string
    AccountSummary:
      type: object
      allOf:
        - $ref: '#/components/schemas/PublicAccountSummary'
        - properties:
            max_users:
              type: integer
            disabled:
              type: boolean
              readOnly: true
            timezone:
              type: string
              default: 'America/Sao_Paulo'
              description: 'Fuso horário da conta. O padrão é America/Sao_Paulo.'
            is_demo:
              type: boolean
              default: false
              description: 'Sinaliza se a conta é ou não de demonstração'
    Account:
      type: object
      allOf:
        - $ref: '#/components/schemas/AccountSummary'
        - properties:
            responsible:
              $ref: '#/components/schemas/AccountResponsible'
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    AdminSummary:
      type: object
      allOf:
        - properties:
            id:
              type: string
              readOnly: true
            name:
              type: string
            email:
              type: string
              format: email
            scopes:
              type: string
            permissions:
              type: object
              properties:
                commercialAccounts:
                  type: string
                trainingAccounts:
                  type: string
                faq:
                  type: string
                suggestions:
                  type: string
                tutorials:
                  type: string
                trainings:
                  type: string
                admins:
                  type: string
            password:
              type: string
            disabled:
              type: boolean
    Admin:
      type: object
      allOf:
        - $ref: '#/components/schemas/AdminSummary'
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    RankSummary:
      type: object
      allOf:
        - properties:
            id:
              type: string
              readOnly: true
            title:
              type: string
              minLength: 3
              maxLength: 255
            disabled:
              type: boolean
              readOnly: true
            hierarchical_level:
              enum: ['Presidency', 'Director', 'Management', 'Supervision', 'Operational']
            responsibilities:
              type: string
              required: false
            requirements:
              type: string
              required: false
            desired:
              required: false
              type: string

    Rank:
      type: object
      allOf:
        - $ref: '#/components/schemas/RankSummary'
        - properties:
            description:
              type: string
              minLength: 1
              maxLength: 8192
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    OnboardingItem:
      type: object
      properties:
        skipped:
          type: boolean
        viewed:
          type: boolean
    OnboardingSummary:
      type: object
      properties:
        generalSkipped:
          type: boolean
        features:
          type: object
    Onboarding:
      type: object
      allOf:
        - $ref: '#/components/schemas/OnboardingSummary'
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    SectorId:
      type: string
      description: '"root" para o setor raiz'
    Sector:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SectorId'
        name:
          type: string
          maxLength: 255
        color:
          type: string
          maxLength: 32
        manager:
          type: string
          nullable: true
        children:
          type: array
          items:
            $ref: "#/components/schemas/OtherSector"
          readOnly: true
      example:
        id: root
        name: Raiz
        color: 'rgb(0, 0, 0)'
        manager: "manager-uuid"
        children: []
    SectorDetailed:
      type: object
      allOf:
        - type: object
          properties:
            parent:
              type: string
        - $ref: '#/components/schemas/SectorSummary'
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    SectorSummary:
      type: object
      properties:
        color:
          type: string
        id:
          $ref: '#/components/schemas/SectorId'
        name:
          type: string
          maxLength: 255
        manager:
          type: string
      example:
        color: 'rgb(0, 0, 0)'
        id: root
        name: Raiz
        manager: null
    OtherSector:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SectorId'
        name:
          type: string
          maxLength: 255
        color:
          type: string
          maxLength: 32
        manager:
          type: string
        children:
          type: array
          items:
            $ref: "#/components/schemas/Sector"
          readOnly: true
    OrgChart:
      type: object
      allOf:
        - properties:
            tree:
              $ref: "#/components/schemas/Sector"
            rev:
              type: number
              format: integer
              minimum: 1
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    ClimateChecks:
      type: object
      properties:
        date:
          type: string
        happy:
          type: integer
          minimum: 0
          maximum: 5
        productive:
          type: integer
          minimum: 0
          maximum: 5
        sector:
          type: string
        supported:
          type: integer
          minimum: 0
          maximum: 5
    UserSummary:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        username:
          type: string
          minLength: 3
          maxLength: 255
        name:
          type: string
          minLength: 3
          maxLength: 255
        email:
          type: string
        sector:
          type: string
        rank:
          type: string
        disabled:
          type: boolean
          readOnly: true
    RoleSummary:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
          minLength: 3
          maxLength: 255
        permissions:
          type: array
          items:
            type: string
    Role:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 255
        permissions:
          type: array
    EmployeeSummary:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        avatarUrl:
          type: string
          readOnly: true
        name:
          type: string
          minLength: 3
          maxLength: 255
        sector:
          type: string
        rank:
          type: string
        disabled:
          type: boolean
          readOnly: true
    UserUpdateHistoryItem:
      type: object
      allOf:
        - properties:
            account:
              type: string
            before:
              $ref: '#/components/schemas/User'
            changed_by:
              type: string
            changes:
              type: array
              items:
                $ref: '#/components/schemas/Operation'
            user:
              type: string
        - $ref: '#/components/schemas/TimestampsAndControlCreatedFields'
    Operation:
      description: 'Lib de referência: https://github.com/Starcounter-Jack/JSON-Patch'
      oneOf:
        - type: object
          properties:
            op:
              enum: ['add']
            path:
              type: string
            value:
              nullable: false
        - type: object
          properties:
            op:
              enum: ['remove']
            path:
              type: string
        - type: object
          properties:
            op:
              enum: ['replace']
            path:
              type: string
            value:
              nullable: false
        - type: object
          properties:
            op:
              enum: ['move']
            path:
              type: string
            from:
              type: string
        - type: object
          properties:
            op:
              enum: ['copy']
            path:
              type: string
            from:
              type: string
    PasswordSchema:
      type: string
      minLength: 8
      maxLength: 255
      writeOnly: true
    User:
      type: object
      required: ['username', 'name', 'sector', 'roles', 'rank']
      allOf:
        - $ref: '#/components/schemas/UserSummary'
        - properties:
            email:
              type: string
            mobile_phone:
              type: string
              maxLength: 32
            password:
              $ref: '#/components/schemas/PasswordSchema'
            roles:
              type: string
            scopes:
              type: string
              readOnly: true
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    UserCount:
      type: object
      properties:
        active:
          type: integer
          readOnly: true
        created:
          type: integer
          readOnly: true
    AsyncTask:
      type: object
      allOf:
        - properties:
            id:
              type: string
              readOnly: true
            type:
              $ref: '#/components/schemas/AsyncTasksType'
            account:
              type: string
              readOnly: true
            employee:
              type: string
              readOnly: true
            data:
              type: string
              readOnly: true
            fileUrl:
              type: string
              readOnly: true
            status:
              type: string
              readOnly: true
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    AbsencesType:
      type: string
      enum: ['maternity_leave', 'paternity_leave', 'medical', 'marriage', 'family_loss', 'blood_donation', 'vote_registration', 'military_service', 'entrance_exam', 'court_appearance', 'vacation']
    AsyncTasksType:
      type: string
      enum: ['import-users', 'export-reports']
    Employee:
      type: object
      allOf:
        - $ref: '#/components/schemas/EmployeeSummary'
        - properties:
            email:
              type: string
            mobile_phone:
              type: string
              maxLength: 32
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    EmployeeDetail:
      type: object
      properties:
        birthday:
          type: string
          format: date-time
        effectivated_at:
          type: string
          format: date-time
        effective:
          type: boolean
        email:
          type: string
          format: email
        dismissed_at:
          type: string
          format: date-time
        hired_at:
          type: string
          format: date-time
        mobile_phone:
          format: string
          maxLength: 32
        register:
          type: string
        working_days:
          type: object
          description: 'Dias da semana representados pelo inteiro correspondente em dateObj.getDay()'
          properties:
            0:
              $ref: '#/components/schemas/EmployeeWorkingDay'
            1:
              $ref: '#/components/schemas/EmployeeWorkingDay'
            2:
              $ref: '#/components/schemas/EmployeeWorkingDay'
            3:
              $ref: '#/components/schemas/EmployeeWorkingDay'
            4:
              $ref: '#/components/schemas/EmployeeWorkingDay'
            5:
              $ref: '#/components/schemas/EmployeeWorkingDay'
            6:
              $ref: '#/components/schemas/EmployeeWorkingDay'
        monthly_hours:
          type: integer
    EmployeeWorkingDay:
      type: object
      properties:
        active:
          type: boolean
        start:
          type: string
          example: '08:00'
        end:
          type: string
          example: '18:00'
    EvaluationsSchedulerType:
      type: string
      enum: ['decision-matrix']
    EmployeeEvaluationsSchedulerType:
      type: string
      enum: ['ape']
    EvaluationsSchedulerRule:
      type: object
      required: ['start', 'frequency']
      properties:
        start:
          type: string
          format: date-time
        frequency:
          type: string
          enum: ['DAILY', 'WEEKLY', 'MONTHLY']
        interval:
          type: integer
          minimum: 1
        end:
          type: string
          format: date-time
    EvaluationsSchedulerSummary:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        type:
          type: string
          enum: ['decision-matrix']
        sector:
          type: string
          readOnly: true
        deadline_offset:
          type: integer
          minimum: 1
          nullable: true
        status:
          type: string
          enum: ['active', 'inactive', 'executed']
          readOnly: true
        rule:
          $ref: '#/components/schemas/EvaluationsSchedulerRule'
    EmployeeEvaluationsScheduler:
      type: object
      allOf:
        - $ref: '#/components/schemas/EvaluationsSchedulerSummary'
        - $ref: '#/components/schemas/TimestampsAndControlFields'
        - properties:
            type:
              type: string
              enum: ['ape']
    EvaluationsScheduler:
      type: object
      allOf:
        - $ref: '#/components/schemas/EvaluationsSchedulerSummary'
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    FeedbackType:
      type: string
      enum: ['compliment', 'guidance']
    FeedbackStatus:
      type: string
      enum: ['approved', 'pending_approval', 'denied']
    FeedbackSummary:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        type:
          $ref: '#/components/schemas/FeedbackType'
        read:
          type: string
          readOnly: true
        employee:
          type: string
          readOnly: true
        sector:
          type: string
        rank:
          type: string
          readOnly: true
    FeedbackSummaryEmployee:
      allOf:
        - $ref: '#/components/schemas/FeedbackSummary'
        - properties:
            text:
              type: string
              readOnly: true
    Feedback:
      type: object
      required: ['type', 'text', 'employee']
      allOf:
        - $ref: '#/components/schemas/FeedbackSummary'
        - properties:
            text:
              type: string
              minLength: 1
              maxLength: 8192
            read_at:
              type: string
              format: datetime
              readOnly: true
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    PendingActionsType:
      type: string
      enum: ['FeedbackNotRead','EvaluationNotRead','CoachingRegisterNotRead','EvaluationNotDone','FeedbackPendingApproval','LatePendingActionType']
    PendingActionsStatus:
      type: string
      enum: ['', 'done']
    ReprimandSummary:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        status:
          type: string
          enum: ['DRAFT', 'GENERATED', 'SENT']
          readOnly: true
        employee:
          type: string
          readOnly: true
        sector:
          type: string
        rank:
          type: string
          readOnly: true
    Reprimand:
      type: object
      required: ['description']
      allOf:
        - $ref: '#/components/schemas/ReprimandSummary'
        - properties:
            description:
              type: string
              minLength: 1
              maxLength: 8192
            docUrl:
              type: string
              format: url
              readOnly: true
              nullable: true
              description: Link para download do documento (se status = GENERATED)
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    SuspensionSummary:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        status:
          type: string
          enum: ['DRAFT', 'GENERATED', 'SENT']
          readOnly: true
        employee:
          type: string
          readOnly: true
        sector:
          type: string
        rank:
          type: string
          readOnly: true
    Suspension:
      type: object
      required: ['description', 'start', 'end']
      allOf:
        - $ref: '#/components/schemas/SuspensionSummary'
        - properties:
            description:
              type: string
              minLength: 1
              maxLength: 8192
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
            docUrl:
              type: string
              format: url
              readOnly: true
              nullable: true
              description: Link para download do documento (se status = GENERATED)
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    EvaluationAnswers:
      type: object
      properties:
        id:
          type: string
        value:
          type: number
          minimum: 1
          maximum: 4
    EvaluationSection:
      type: object
      properties:
        avg:
          type: number
          readOnly: true
        answers:
          type: array
          items:
            $ref: '#/components/schemas/EvaluationAnswers'
    EvaluationStatus:
      type: string
      enum: ['created', 'done', 'expired']
      readOnly: true
    EvaluationType:
      type: string
      enum: ['decision-matrix', 'ape', 'multidirectional.']
    EvaluationSummary:
      type: object
      allOf:
        - properties:
            id:
              type: string
              readOnly: true
            type:
              $ref: '#/components/schemas/EvaluationType'
            daysLate:
              type: integer
              readOnly: true
            deadline:
              type: string
              format: date-time
            employee:
              type: string
              readOnly: true
            responsible:
              type: string
              readOnly: true
            evaluatorsArray:
              type: array
            sector:
              type: string
            rank:
              type: string
              readOnly: true
            status:
              $ref: '#/components/schemas/EvaluationStatus'
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    EvaluationCreate:
      type: object
      required: ['type']
      allOf:
        - $ref: '#/components/schemas/EvaluationSummary'
    EvaluationSkills:
      type: object
      properties:
        technical:
          $ref: '#/components/schemas/EvaluationSection'
        emotional:
          $ref: '#/components/schemas/EvaluationSection'
    EvaluationObservations:
      type: string
    EvaluationAPE:
      type: object
      properties:
        criteria:
          $ref: '#/components/schemas/EvaluationSection'
        observations:
          $ref: '#/components/schemas/EvaluationObservations'
    EvaluationUpdate:
      $ref: '#/components/schemas/EvaluationSkills'
    EvaluationFullUpdate:
      type: object
      allOf:
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/EvaluationType'
        - oneOf:
          - $ref: '#/components/schemas/EvaluationSkills'
          - $ref: '#/components/schemas/EvaluationAPE'
    Evaluation:
      type: object
      allOf:
        - $ref: '#/components/schemas/EvaluationSummary'
        - $ref: '#/components/schemas/TimestampsAndControlFields'
        - oneOf:
          - $ref: '#/components/schemas/EvaluationAPE'
          - $ref: '#/components/schemas/EvaluationSkills'
    NewsFeedInput:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        text:
          type: string
        video_type:
          type: string
          enum: ['none', 'youtubeUrl', 'uploadedVideo']
        video_url:
          type: string
        video_uploaded_id:
          type: string
    NewsFeed:
      type: object
      allOf:
        - $ref: '#/components/schemas/NewsFeedInput'
        - properties:
            image:
              type: string
            attachments:
              type: array
              items:
                type: object
            attachment_keys:
              type: array
              items:
                type: string
    CoachingRegisterSummary:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        employee:
          type: string
          readOnly: true
        sector:
          type: string
          readOnly: true
        rank:
          type: string
          readOnly: true
        read:
          type: string
          readOnly: true
    CoachingRegisterTodo:
        type: object
        required: ['what', 'why', 'who', 'where', 'when', 'how', 'how_much']
        properties:
          id:
            type: string
            readOnly: true
          what:
            type: string
            maxLength: 255
          why:
            type: string
            maxLength: 255
          who:
            type: string
            maxLength: 255
          where:
            type: string
            maxLength: 255
          when:
            type: string
            format: date-time
          how:
            type: string
            maxLength: 255
          how_much:
            type: string
            maxLength: 255
          completed:
            type: boolean
            readOnly: true
          completed_at:
            type: string
            format: date-time
            readOnly: true
    CoachingRegisterUpdate:
      type: object
      properties:
        current_state:
          type: string
          minLength: 1
          maxLength: 8192
        intended_state:
          type: string
          minLength: 1
          maxLength: 8192
    CoachingRegister:
      type: object
      required: ['current_state', 'intended_state', 'todos']
      allOf:
        - $ref: '#/components/schemas/CoachingRegisterSummary'
        - $ref: '#/components/schemas/CoachingRegisterUpdate'
        - properties:
            todos:
              type: array
              minItems: 1
              maxItems: 16
              items:
                $ref: '#/components/schemas/CoachingRegisterTodo'
            read_at:
              type: string
              format: datetime
              readOnly: true
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    PendingAction:
      type: object
      allOf:
        - properties:
            id:
              type: string
            type:
              type: string
            date:
              type: string
              format: date-time
            data:
              type: object
              description: payload da pendência (depende do tipo)
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    Timeline:
      type: object
      allOf:
        - properties:
            id:
              type: string
              readOnly: true
            type:
              type: string
              readOnly: true
            date:
              type: string
              format: date-time
              readOnly: true
            data:
              type: object
              description: payload do evento (depende do tipo)
              readOnly: true
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    ContentAttachment:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
        metadata:
          type: object
          properties:
            name:
              type: string
            type:
              type: string
            size:
              type: string
    Content:
      type: object
      allOf:
        - properties:
            id:
              type: string
              readOnly: true
            type:
              type: string
              enum: ['text', 'image', 'video', 'attachments']
            value:
              oneOf:
                - type: string
                - type: array
                  description: 'caso tipo seja "attachments"'
                  items:
                    $ref: '#/components/schemas/ContentAttachment'
                  readOnly: true
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    TrainingTrail:
      type: object
      required: ['title', 'description', 'deadline']
      allOf:
        - properties:
            id:
              type: string
              readOnly: true
            title:
              type: string
            description:
              type: string
            ranks:
              type: array
              items:
                type: string
            sectors:
              type: array
              items:
                type: string
            roles:
              type: array
              items:
                type: string
            deadline:
              type: number
              minimum: 1
            disabled:
              type: boolean
              readOnly: true
            trainings:
              type: array
              items:
                type: string
              readOnly: true
            employee:
              type: array
              items:
                type: string
            category:
              type: string
              enum: ['', 'EDUCATION_AND_CULTURE', 'OPERATIONAL_TRAINING', 'ADVANCED_TRAINING']
            thumbnail:
              type: string
              readOnly: true
        - $ref: '#/components/schemas/TimestampsAndControlFields'

    Training:
      type: object
      allOf:
        - properties:
            id:
              type: string
              readOnly: true
            title:
              type: string
            thumbnail:
              type: string
              readOnly: true
            categories:
              type: array
              items:
                type: string
            allowedAccounts:
              type: array
              items:
                type: string
            description:
              type: string
              nullable: true
            disabled:
              type: boolean
              readOnly: true
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    TrainingProgress:
      type: object
      allOf:
        - properties:
            training:
              type: string
              readOnly: true
            topics:
              type: object
              readOnly: true
            employee:
              type: string
              readOnly: true
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    TrainingTopic:
      type: object
      allOf:
        - properties:
            id:
              type: string
              readOnly: true
            title:
              type: string
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    AbsenceSummary:
      type: object
      allOf:
        - properties:
            id:
              type: string
              readOnly: true
            type:
              $ref: '#/components/schemas/AbsencesType'
              default: vacation
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
            sold:
              type: boolean
              default: false
            sector:
              type: string
    Absence:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbsenceSummary'
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    VacationSummary:
      type: object
      allOf:
        - properties:
            id:
              type: string
              readOnly: true
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
            sold:
              type: boolean
              default: false
            sector:
              type: string
    Vacation:
      type: object
      allOf:
        - $ref: '#/components/schemas/VacationSummary'
        - properties:
            employee:
              type: string
              readOnly: true
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    TemplateSummary:
      type: object
      allOf:
        - properties:
            id:
              type: string
              readOnly: true
            type:
              type: string
              enum: ['Feedback', 'Reprimand', 'Suspension']
            properties:
              type: object
              properties:
                title:
                  type: string
                type:
                  type: string
    Template:
      type: object
      allOf:
        - $ref: '#/components/schemas/TemplateSummary'
        - properties:
            properties:
              type: object
              required: ['title', 'text', 'type']
              properties:
                title:
                  type: string
                  description: Título do template
                type:
                  type: string
                  description: Tipo do template (atualmete válido para Feedback)
                text:
                  type: string
                  description: texto do template
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    NoteSummary:
      type: object
      allOf:
        - properties:
            id:
              type: string
              readOnly: true
            user:
              type: string
              readOnly: true
            account:
              type: string
              readOnly: true
            text:
              type: string
              minLength: 3
              maxLength: 100
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    Note:
      type: object
      required: ['text']
      allOf:
        - $ref: '#/components/schemas/NoteSummary'
        - properties:
            text:
              type: string
              minLength: 3
              maxLength: 8192
    DismissInterviewSummary:
      type: object
      properties:
        details:
          type: string
          minLength: 3
          maxLength: 8192
        dismissed_at:
          type: string
          format: date-time
    DismissInterview:
      type: object
      allOf:
        - $ref: '#/components/schemas/DismissInterviewSummary'
        - $ref: '#/components/schemas/TimestampsAndControlFields'
    TimestampsAndControlCreatedFields:
      properties:
        created_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: string
          readOnly: true
    TimestampsAndControlUpdatedFields:
      properties:
        updated_at:
          type: string
          format: date-time
          readOnly: true
        updated_by:
          type: string
          readOnly: true
    TimestampsAndControlFields:
      allOf:
        - $ref: '#/components/schemas/TimestampsAndControlCreatedFields'
        - $ref: '#/components/schemas/TimestampsAndControlUpdatedFields'
    LanguagesEnums:
      type: string
      enum:
        - "Arabic"
        - "Cantonese"
        - "Catalan"
        - "Chinese"
        - "Danish"
        - "Dutch"
        - "English"
        - "Finnish"
        - "French"
        - "German"
        - "Greek"
        - "Hebrew"
        - "Hindi"
        - "Hungarian"
        - "Icelandic"
        - "Indonesian"
        - "Irish"
        - "Italian"
        - "Japanese"
        - "Korean"
        - "Malayalam"
        - "Mandarin Chinese"
        - "Norwegian"
        - "Polish"
        - "Portuguese"
        - "Romanian"
        - "Russian"
        - "Spanish"
        - "Swedish"
        - "Taiwanese Mandarin"
        - "Tamil"
        - "Thai"
        - "Turkish"
        - "Ukrainian"
        - "Urdu"
        - "Vietnamese"
        - "Welsh"
        - "Zulu"
  parameters:
    page:
      name: page
      in: query
      schema:
          type: integer
          minimum: 0
          default: 0
    pageSize:
      name: pageSize
      in: query
      schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
    order:
      name: order
      in: query
      schema:
        type: string
        enum:
          - ASC
          - DESC
        default: DESC
    search:
      name: search
      in: query
      schema:
        type: string
    created_by:
      name: created_by
      in: query
      schema:
        type: string
    employee:
      name: employee
      in: query
      schema:
        type: string
    sector:
      name: sector
      in: query
      schema:
        $ref: '#/components/schemas/SectorId'
    EvaluationStatus:
      name: status
      in: query
      schema:
        $ref: '#/components/schemas/EvaluationStatus'
    EvaluationType:
      name: type
      in: query
      schema:
        $ref: '#/components/schemas/EvaluationType'
    EvaluationDaysLate:
      name: daysLate
      in: query
      schema:
        type: integer
        minimum: 1
    EvaluationOnlyLast:
      name: onlyLast
      in: query
      schema:
        type: boolean
        default: false
    FeedbackType:
      name: type
      in: query
      schema:
        $ref: '#/components/schemas/FeedbackType'
    FeedbackFrom:
      name: from
      in: query
      schema:
        type: string
        format: date-time
    FeedbackTo:
      name: to
      in: query
      schema:
        type: string
        format: date-time
    TrainingOrderBy:
      name: orderBy
      in: query
      schema:
        type: string
        enum: ['created_at']
        default: created_at
    UserOrderBy:
      name: orderBy
      in: query
      schema:
        type: string
        enum: ['name', 'updated_at']
        default: name
    UserSearchIn:
      name: searchIn
      in: query
      schema:
        type: array
        items:
          type: string
        default: ['id', 'name', 'username', 'email']
    EmployeeSearchIn:
      name: searchIn
      in: query
      schema:
        type: array
        items:
          type: string
        default: ['id', 'name', 'email']
    IncludeDisabled:
      name: includeDisabled
      in: query
      schema:
        type: boolean
        default: false
    deep:
      name: deep
      description: Define se valores de setores relativos ao setor passado devem ser computados.
      in: query
      required: false
      schema:
        type: boolean
        default: false
    subordinateTo:
      name: subordinate_to
      in: query
      schema:
        type: string
    NotesOrderBy:
      name: orderBy
      in: query
      schema:
        type: string
        enum: ['created_at', 'updated_at']
        default: created_at
    FormatType:
      name: format
      in: query
      description: Tipo de saída da listagem (xlsx solicita uma exportação)
      schema:
        type: string
        enum: ['json', 'xlsx', 'summary']
        default: json
  JobVacancy:
    type: object
    properties:
      title:
        type: string
      rank:
        type: string
      sector:
        type: string
      responsibleManager:
        type: string
      requestDate:
        type: string
        format: date
      openingReason:
        type: string
        enum:
          - staffIncrease
          - replacement
      justification:
        type: string
      replacementReason:
        type: string
        enum:
          - resignationRequest
          - Dismissal
          - maternityLeave
          - medicalLeave
      workSchedule:
        type: object
        properties:
          0:
            type: string
          1:
            type: string
          2:
            type: string
          3:
            type: string
          4:
            type: string
          5:
            type: string
          6:
            type: string
      minSalary:
        type: number
      maxSalary:
        type: number
      description:
        type: string
      responsibilities:
        type: string
      requirements:
        type: string
      desirable:
        type: string
      enabled:
        type: boolean
      status:
        type: string
        enum:
          - draft
          - open

  JobVacancyUpdate:
    type: object
    properties:
      title:
        type: string
      rank:
        type: string
      sector:
        type: string
      responsibleManager:
        type: string
      requestDate:
        type: string
        format: date
      openingReason:
        type: string
        enum:
          - staffIncrease
          - replacement
      justification:
        type: string
      replacementReason:
        type: string
        enum:
          - resignationRequest
          - Dismissal
          - maternityLeave
          - medicalLeave
      workSchedule:
        type: object
        properties:
          0:
            type: string
          1:
            type: string
          2:
            type: string
          3:
            type: string
          4:
            type: string
          5:
            type: string
          6:
            type: string
      minSalary:
        type: number
      maxSalary:
        type: number
      description:
        type: string
      responsibilities:
        type: string
      requirements:
        type: string
      desirable:
        type: string
      enabled:
        type: boolean
      status:
        type: string
        enum:
          - draft
          - open
    PendingActionsTypeQuery:
      name: type
      in: query
      schema:
        type: array
        items:
          type: string
        default: ['FeedbackNotRead','EvaluationNotRead','CoachingRegisterNotRead','EvaluationNotDone','FeedbackPendingApproval','LatePendingActionType']
